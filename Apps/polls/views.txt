# Create your views here.
from django.shortcuts import render, redirect
from django.http import HttpResponse
from django.db.models import Q,Count
from django.db import connection
from drf_yasg.utils import swagger_auto_schema
from drf_yasg.openapi import Parameter, Schema, Response, TYPE_FILE, TYPE_INTEGER, TYPE_OBJECT, TYPE_STRING,IN_QUERY
from rest_framework.views import APIView    from django.views.decorators.csrf import csrf_exempt
from json import dumps, loads
from time import localtime, strftime,time
from . import models
from math import ceil
from django.core.paginator import Paginator, EmptyPage
from captcha.models import CaptchaStore
from captcha.helpers import captcha_image_url
from copy import deepcopy
from uuid import uuid4
tmp = 'polls/Login/'
content_type_tmp = 'application/json'
data_base_error = '数据库出现错误，请联系管理员'
data_base_error_specific = "数据库出现错误，请联系管理员，错误原因是"
no_idea = ' No idea what is this used for  '
name_user = '使用者的姓名'
psw_word = '使用者的密码'
time_update_database = '记录最后更新时间；（2000-1-1 0:0:0 经过的秒），必须有值'
id_in_use = '是关键字，每个位置的唯一标识，一旦添加不能更改，必须有值；'
introduction_course = ' 课程介绍 '
id_error = 'id号码不存在，请重新输入'
post_success = '获取数据成功'
post_error = '查询失败，请重新尝试'
put_success = '数据添加完成'
put_error = '添加失败，请重新尝试'
patch_success = '数据修改已经完成'
patch_error = '修改失败，重新尝试'
data_schema = {
    'id': Schema(
        title='ID',
        description='使用者的id',
        type=TYPE_INTEGER,
        format='int32',
    ),
    'nocard': Schema(
        title='ID of card ',
        description='用户的卡号',
        type=TYPE_STRING,
        format='string',
    ),
    'nouser': Schema(
        title='ID of user ',
        description='用户的身份id（比如学生的id就是他自己的学号）',
        type=TYPE_STRING,
        format='string',
    ),
    'name': Schema(
        title=name_user,
        description=name_user,
        type=TYPE_STRING,
        format='string'
    ),
    'psw': Schema(
        title=psw_word,
        description=psw_word,
        type=TYPE_STRING,
        format='string'
    ),
    'deptid__name': Schema(
        title='部门',
        description='用户所属的部门名称',
        type=TYPE_STRING,
        format='string'
    ),
    'sex': Schema(
        title='性别',
        description='用户的性别，0代表女性，1代表男性',
        enum=[0, 1],
        type=TYPE_INTEGER,
        format='int32',
    ),
    'attr': Schema(
        title='权限',
        description='用户管理权限，0代表超级管理员，1代表教务处管理员，2代表辅导员，3代表教师，4代表学生',
        enum=[0, 1, 2, 3, 4],
        type=TYPE_INTEGER,
        format='int32',
    ),
    'timeupdate': Schema(
        title='信息更新时间',
        description=time_update_database,
        type=TYPE_INTEGER,
        format='int32',
    ),
    'localid': Schema(
        title='管理员地点',
        description=' 管理员所在的地点',
        type=TYPE_STRING,
        format='string'
    ),
    'userex_related_to_user_information__timeupdate': Schema(
        title='timeupdate',
        description=time_update_database,
        type=TYPE_INTEGER,
        format='int32',
    ),
    'userex_related_to_user_information__idmanager__name': Schema(
        title='管理员姓名',
        description='修改账户的管理员姓名',
        type=TYPE_STRING,
        format='string'
    ),
    'userex_related_to_user_information__rem': Schema(
        title='描述',
        description='照片的描述',
        type=TYPE_STRING,
        format='string'
    ),
    'userex_related_to_user_information__photo': Schema(
        title='照片',
        description='照片',
        type=TYPE_FILE,
    ),
}

get_request_body = Schema(
    title=' get 方法的request body形式',
    description=' the request body for this, if page =0 and limits=0, response will return all information without divided into pages.',
    type=TYPE_OBJECT,
    properties={
                'page': Schema(
                    title='page ',
                    description=' the page you decide to show ',
                    type=TYPE_INTEGER,
                    format='int32'
                ),
                'limits': Schema(
                    title='the limits of line in one page ',
                    description='the limits of line in one page',
                    type=TYPE_INTEGER,
                    format='int32'
                ),
    },
    required=['page', 'limits']
)
data_schema_present = Schema(
    title ='查询成功的返回',
    description = '查询成功返回的函数值',
    type = TYPE_OBJECT,  # 类型
    properties = data_schema
)
get_responses_success = Schema(
    title='成功获取查询数据',
    description='这个接口用于展示成功获取全部数据的格式',
    type=TYPE_OBJECT,
    properties={
                'page': Schema(
                    title='表示当前的页码数',
                    description=' 表示你现在想要展示的页码数',
                    type=TYPE_INTEGER,
                    format='int32'
                ),
        'limits': Schema(
                    title='行数',
                    description='表示你想展示在一页上展示的数据行数',
                    type=TYPE_INTEGER,
                    format='int32'
                ),
        'total_number': Schema(
                    title='页数',
                    description='表示总页数',
                    type=TYPE_INTEGER,
                    format='int32'
                ),
        'data': Schema(
                    title='数据',
                    description='用于传递查询到的全部数据',
                    type=TYPE_OBJECT,
                    properties = [data_schema_present,data_schema_present]
                ),
    }
)

responses_success = Schema(
    title='成功消息',
    description='将会返回的成功消息 ',
    type=TYPE_OBJECT,
    properties={
        'message': Schema(
            title='成功消息',
            description='传达的当响应成功的时候的消息',
            type=TYPE_STRING,
            format='string'
        )
    }
)

responses_fail = Schema(
    title='失败消息',
    description='将会返回的失败消息 ',
    type=TYPE_OBJECT,
    properties={
        'message': Schema(
            title='失败消息',
            description='传达的当响应失败的时候的消息',
            type=TYPE_STRING,
            format='string'
        )
    }
)

post_search = {
    'input_string': Schema(
        title='输入的查询字符串',
        type=TYPE_STRING,
        format='string',
    )
}
id_schema = Schema(
    title = '信息查询的id号',
    description = '数据库表中需要被删除的字段的id号',
    type=TYPE_OBJECT,
    properties = {'data_id':Schema(
                title = ' id' ,
                description=' 需要删除的每一个id号 ',
                type = TYPE_INTEGER,
                format = 'int32',)}
)

delete_schema = {
            'ids':Schema(
                title= ' id号',
                description = '整个需要被删除的信息的id号排列',
                type = TYPE_OBJECT,
                properties = [id_schema,id_schema]
            )
}
multiple_use = {
        'id':
        Schema(
            title='课程id号',
            description=id_in_use,
            type=TYPE_INTEGER,
            format='int32',
            enum=None,
        ),
        'timebegin':
        Schema(
            title='开始时间',
            description=
            ' 项目开始时间（相对于一天0时0分0秒开始的秒数），必须有值',
            type=TYPE_INTEGER,
            format='int32',
            enum=None,
        ),
        'timeend':
        Schema(
            title='结束时间',
            description=
            '项目结束时间（相对于一天0时0分0秒开始的秒数），必须有值',
            type=TYPE_INTEGER,
            format='int32',
            enum=None,
        ),
        'id_location':
        Schema(
            title='地点id',
            description='课程上课的具体地点id号',
            type=TYPE_INTEGER,
            format='int32',
            enum=None,
        ),
        'id_speaker':
        Schema(
            title='演讲者的id',
            description='课程演讲者的id号',
            type=TYPE_INTEGER,
            format='int32',
            enum=None,
        ),
        'attr':
        Schema(
            title='考勤类型',
            description=
            '1代表实验类型、2代表普通上课类型、3讲座考勤类型',
            type=TYPE_INTEGER,
            format='int32',
            enum=None,
        ),
        'charge':
        Schema(
            title='是否收费',
            description=
            ' 免费0、收费1、开放2',
            type=TYPE_INTEGER,
            format='int32',
            enum=None,
        ),
        'pwaccess':
        Schema(
            title='派位',
            description='不派位0、刷卡派位1（派位指用户刷卡时系统指定座位），必须有值',
            type=TYPE_INTEGER,
            format='int32',
            enum=None,
        ),
        'pwcontinuous':
        Schema(
            title='派位连续性',
            description='连续派位0、随机派位1，必须有值',
            type=TYPE_INTEGER,
            format='int32',
            enum=None,
        ),
        'pwdirection':
        Schema(
            title='排位顺序',
            description='顺序派位0、逆序派位1（当设置为随机派位时本功能无效），必须有值',
            type=TYPE_INTEGER,
            format='int32',
            enum=None,
        ),
        'dooropen':
        Schema(
            title='是否开门',
            description=
            '匹配的用户刷卡是否开门，0开门，1不开门',
            type=TYPE_INTEGER,
            format='int32',
            enum=None,
        ),
        'timebegincheckbegin':
        Schema(
            title='考勤开始最早时间',
            description=
            ' 安排考勤开始的最早时间（单位为分钟，0代表无效），必须有值  ',
            type=TYPE_INTEGER,
            format='int32',
            enum=None,
        ),
        'timebegincheckend':
        Schema(
            title='考勤开始最迟时间 ',
            description=
            ' 安排考勤开始的最迟时间（单位为分钟，0代表无效），必须有值 ',
            type=TYPE_INTEGER,
            format='int32',
            enum=None,
        ),
        'timeendcheckbegin':
        Schema(
            title='考勤结束最早时间',
            description=
            ' 安排考勤结束的最早时间（单位为分钟，0代表无效），必须有值 ',
            type=TYPE_INTEGER,
            format='int32',
            enum=None,
        ),
        'timeendcheckend':
        Schema(
            title='考勤结束最短时间',
            description=
            ' 安排考勤结束的最迟时间（单位为分钟，0代表无效），必须有值',
            type=TYPE_INTEGER,
            format='int32',
            enum=None,
        ),
        'rangeusers':
        Schema(
            title=' 参加这门课的所属学生数 ',
            description=
            ' 参加本安排的学生部门列表',
            type=TYPE_STRING,
            format='string',
            enum=None,
        ),
        'listdepts':
        Schema(
            title='参加这门课的学生',
            description='参加本安排的学生学号列表（与RangeUser为相加的关系）',
            type=TYPE_STRING,
            format='string',
            enum=None,
        ),
        'rangeequs':
        Schema(
            title=' 座位的范围表 ',
            description=' 课程使用的座位范围列表',
            type=TYPE_STRING,
            format='string',
            enum=None,
        ),
        'listplaces':
        Schema(
            title='对应表',
            description=' 课程使用的地点列表（与课程使用的座位范围列表为相加的关系）',
            type=TYPE_STRING,
            format='string',
            enum=None,
        ),
        'mapuser2equ':
        Schema(
            title='学生和座位对应表',
            description='学生和座位对应表',
            type=TYPE_STRING,
            format='string',
            enum=None,
        ),
        'aboutspeaker':
        Schema(
            title='本课程主讲人介绍',
            description=' 本课程主讲人介绍 ',
            type=TYPE_STRING,
            format='string',
            enum=None,
        ),
        'rem':
        Schema(
            title=introduction_course,
            description=introduction_course,
            type=TYPE_STRING,
            format='string',
            enum=None,
        ),
        'timeupdate':
        Schema(
            title='记录更新时间',
            description=' 记录最后更新时间；（2000-1-1 0:0:0 经过的秒），必须有值',
            type=TYPE_INTEGER,
            format='int32',
            enum=None,
        ),
        'idmanager':
        Schema(
            title='修改id名称',
            description=' 操作员ID',
            type=TYPE_INTEGER,
            format='int32',
            enum=None,
        ),
    }
multiple_use_schema =    Schema(
            title='课程编号',
            description='课程在课程安排表上的唯一编号',
            type=TYPE_STRING,
            format='string',
            enum=None,
        )
data_schema_personal_data = {
        'status':
        Schema(
            title='签到',
            description=' 1 代表 已在课程中签到，2 代表已经在课程中签退3 代表在课程中迟到，4 代表旷课',
            type=TYPE_INTEGER,
            format='int32',
            enum=[1,2,3,4],
        ),
        'param2':
        Schema(
            title='签到课程',
            description='签到的课程安排表id ',
            type=TYPE_INTEGER,
            format='int32',
            enum=None,
        ),
        'param2__id_curricula__name':
        Schema(
            title='签到课程名称',
            description='签到课程名称',
            type=TYPE_INTEGER,
            format='int32',
            enum=None,
        ),
        'param2__timebegin':
        Schema(
            title='签到课程开始时间',
            description='签到课程开始时间',
            type=TYPE_INTEGER,
            format='int32',
            enum=None,
        ),
        'param2__timeend':
        Schema(
            title='签到课程结束时间',
            description='签到课程结束时间',
            type=TYPE_INTEGER,
            format='int32',
            enum=None,
        ),
        'timeupdate':
        Schema(
            title='记录更新时间',
            description=' 记录最后更新时间；（2000-1-1 0:0:0 经过的秒），必须有值',
            type=TYPE_INTEGER,
            format='int32',
            enum=None,
        ),
        'idmanager__name':
        Schema(
            title='修改字段的操作员姓名',
            description=' 修改字段数据的操作员姓名',
            type=TYPE_INTEGER,
            format='int32',
            enum=None,
        ),
        'time':
        Schema(
            title='上课时间',
            description=' 每一次课程的上课时间，从2001年一月一日的秒数',
            type=TYPE_INTEGER,
            format='int32',
            enum=None,
        ),
    }
data_schema_personal = Schema(
            title='学生个人数据',
            description=' 学生个人数据',
            type=TYPE_OBJECT,
            properties = data_schema_personal_data
        )
def data_page_response(data,pages,limits):
    if list(data) == []:
        return HttpResponse(dumps({'message':data_base_error }), content_type=content_type_tmp, charset='utf-8')
    object_page = Paginator(data, limits)
    total_number = object_page.num_pages
    try:
        data_response = object_page.page(pages)
    except EmptyPage:
        data_response = object_page.page(total_number)
    return HttpResponse(dumps({ 'data': list(data)}), content_type=content_type_tmp, charset='utf-8')

def data_total_response(data, pages, limits):
    if list(data) == []:
        return HttpResponse(dumps({'message': "数据库出现错误，请联系管理员"}), content_type=content_type_tmp, charset='utf-8')
    else:
        data_response= list(data)
        total_number= len(data_response)
        return HttpResponse(dumps({ 'data': data_response}), content_type=content_type_tmp, charset='utf-8')

def check_session_index(request):
    status = request.session.get('is_login')
    if not status:
        return redirect(tmp)
    return render(request, "check_session_index.html")

# 用于将request转化的函数


def get_request_args(func):
    def _get_request_args(self, request):
        if request.method == 'GET':
            args = request.GET
            session = request.session
        else:
            body = request.body
            session = request.session
            if body:
                try:
                    args = loads(body)
                except Exception as e:
                    print (e)
                    # return makeJsonResponse(status=StatusCode.EXECUTE_FAIL, message=str(e))
                    args = request.POST
            else:
                args = request.POST
        return func(self, request,args,session)
    return _get_request_args


def data_equipment_response(data_equipment, page, limits):
    total = len(data_equipment)
    total_number = ceil(total/limits)
    if page > total_number:
        page = total_number
    page_first = limits * (page-1)
    if page == total_number:
        data_equipment = data_equipment[page_first:]
    else:
        page_last = limits*page
        data_equipment = data_equipment[page_first:page_last]
    if data_equipment == []:
        return HttpResponse(dumps({'message': data_base_error}),
                            content_type=content_type_tmp,
                            charset='utf-8')
    data_status = {0: '正常空闲', 1: '故障', 2: '其他', 3: '正常使用中', 4: '开放'}
    data_login = {0: '未登录', 1: '已登录'}
    data_link = {0: '脱机', 1: '在线'}
    data_class = {0: 'PC设备', 2: '刷卡设备'}
    for i in range(limits):
        data_tmp_location = list(models.TCylocation.objects.filter(
            id=data_equipment[i]['id_location']).values())
        data_equipment[i]['id_location'] = data_tmp_location[0]['name']
        data_equipment[i]['state'] = data_status.get(
            data_equipment[i]['state'])
        data_equipment[i]['login'] = data_login.get(data_equipment[i]['login'])
        data_equipment[i]['link'] = data_link.get(
            data_equipment[i]['link'])
        data_equipment[i]['class'] = data_class.get(data_equipment[i]['class'])
        data_equipment[i]['id_user'] = list(models.TCyuser.objects.filter(
            id=data_equipment[i]['id_user']).values())[0]['name']
        time_array = localtime(946656000+data_equipment[i]['timeupdate'])
        data_equipment[i]['timeupdate'] = strftime(
            "%Y-%m-%d %H:%M:%S", time_array)
        data_equipment[i]['idmanager'] = list(models.TCyuser.objects.filter(
            id=data_equipment[i]['idmanager']).values())[0]['name']
    return HttpResponse(dumps({'page': page, 'limits': limits, 'total_number': total_number, 'data': data_equipment}), content_type=content_type_tmp, charset='utf-8')


def data_attendance_format(data_equipment,data_plan,id_list):
    id_user_initial = data_equipment[0]['id_user']
    data_equipment_return =[]
    person_data=[]
    attend_times = 0
    attend_total = 0
    for i in data_equipment:
        data_id_user = i['id_user']
        if id_user_initial == data_id_user:
            person_data_one = {}
            for j in data_plan:
                if i['param2'] == j['id']:
                    person_data_one['param2']=i['param2']
                    person_data_one['param2__id_curricula__name'] = i['param2__id_curricula__name']
                    person_data_one['param2__timebegin'] = i['param2__timebegin']
                    person_data_one['param2__timeend'] = i['param2__timeend']
                    person_data_one['timeupdate'] = i['timeupdate']
                    person_data_one['idmanager__name'] = i['idmanager__name']
                    person_data_one['time'] = i['time']
                    if j['param2__timebegin']<= i['time']<= j['param2__timeend']:
                        person_data_one['status'] = 1
                        attend_times = attend_times +1
                        if j['param2__timebegin']+j['param2_timebegincheckend'] *60 < i['time']:
                            person_data_one['status'] = 2
                    elif j['param2__timeend']+j['param2_timecheckend'] <i['time']:
                            person_data_one['status'] =3
                    attend_total = attend_total + 1
                    person_data.append(person_data_one)
                    break
        else:
            person_total_data ={}
            person_total_data['id'] = id_user_initial
            person_total_data['id_user__name'] = i['id_user__name']
            person_total_data['attendtimes'] = attend_times
            person_total_data['attendtotal'] = attend_total
            person_total_data['attendrates'] = attend_times/attend_total
            person_total_data['person_data'] = person_data
            id_user_initial = data_id_user
            data_equipment_return.append(person_total_data)
            person_data=[]
            attend_times = 0
            attend_total = 0
            person_data_one = {}
            for j in data_plan:
                if i['param2'] == j['id']:
                    person_data_one['param2']=i['param2']
                    person_data_one['param2__id_curricula__name'] = j['id_curricula__name']
                    person_data_one['param2__timebegin'] = j['timebegin']
                    person_data_one['param2__timeend'] = j['timeend']
                    person_data_one['timeupdate'] = j['timeupdate']
                    person_data_one['idmanager__name'] = i['idmanager__name']
                    person_data_one['time'] = i['time']
                    if j['timebegin']<= i['time']<= j['timeend']:
                        person_data_one['status'] = 1
                        attend_times = attend_times +1
                        if j['timebegin']+j['timebegincheckend'] *60 < i['time']:
                            person_data_one['status'] = 2
                    elif j['timeend']+j['timecheckend'] <i['time']:
                            person_data_one['status'] =3
                    attend_total = attend_total + 1
                    person_data.append(person_data_one)
                    break
    else:
            person_total_data ={}
            person_total_data['id'] = id_user_initial
            person_total_data['id_user__name'] = i['id_user__name']
            person_total_data['attendtimes'] = attend_times
            person_total_data['attendtotal'] = attend_total
            person_total_data['attendrates'] = attend_times/attend_total
            person_total_data['person_data'] = person_data
            data_equipment_return.append(person_total_data)
    return data_equipment_return


def data_attendance_class_format(data_equipment,data_plan,id_list):
    id_user_initial = data_equipment[0]['param2']
    data_equipment_return =[]
    person_data=[]
    attend_times = 0
    attend_total = 0
    param2 = 0
    param2__id_curricula__name =0
    param2__timebegin = 0
    param2__timeend =0
    for i in data_equipment:
        data_id_user = i['param2']
        if id_user_initial == data_id_user:
            person_data_one = {}
            for j in data_plan:
                if i['param2'] == j['id']:
                    param2 = j['param2']
                    param2__id_curricula__name =j['id_curricula__name']
                    param2__timebegin =j['timebegin']
                    param2__timeend =j['timeend']
                    person_data_one['id']=i['id']
                    person_data_one['id_user__name'] = i['id_user__name']
                    person_data_one['timeupdate'] = i['timeupdate']
                    person_data_one['idmanager__name'] = i['idmanager__name']
                    person_data_one['time'] = i['time']
                    if j['timebegin']<= i['time']<= j['timeend']:
                        person_data_one['status'] = 1
                        attend_times = attend_times +1
                        if j['timebegin']+j['timebegincheckend'] *60 < i['time']:
                            person_data_one['status'] = 2
                    elif j['timeend']+j['timecheckend'] <i['time']:
                            person_data_one['status'] =3
                    attend_total = attend_total + 1
                    person_data.append(person_data_one)
                    break
                    break
        else:
            person_total_data ={}
            person_total_data['param2'] = param2
            person_total_data['param2__id_curricula__name'] =param2__id_curricula__name
            person_total_data['param2__timebegin'] =param2__timebegin
            person_total_data['param2__timeend'] =param2__timeend
            person_total_data['id_user__name'] = i['id_user__name']
            person_total_data['attendnumbers'] = attend_times
            person_total_data['totalnumbers'] = attend_total
            person_total_data['attendrates'] = attend_times/attend_total
            person_total_data['person_data'] = person_data
            id_user_initial = data_id_user
            data_equipment_return.append(person_total_data)
            person_data=[]
            attend_times = 0
            attend_total = 0
            person_data_one = {}
            for j in data_plan:
                if i['param2'] == j['id']:
                    person_data_one['param2']=i['param2']
                    person_data_one['param2__id_curricula__name'] = i['param2__id_curricula__name']
                    person_data_one['param2__timebegin'] = i['param2__timebegin']
                    person_data_one['param2__timeend'] = i['param2__timeend']
                    person_data_one['timeupdate'] = i['timeupdate']
                    person_data_one['idmanager__name'] = i['idmanager__name']
                    person_data_one['time'] = i['time']
                    if j['param2__timebegin']<= i['time']<= j['param2__timeend']:
                        person_data_one['status'] = 1
                        attend_times = attend_times +1
                        if j['param2__timebegin']+j['param2_timebegincheckend'] *60 < i['time']:
                            person_data_one['status'] = 2
                    elif j['param2__timeend']+j['param2_timecheckend'] <i['time']:
                            person_data_one['status'] =3
                    attend_total = attend_total + 1
                    person_data.append(person_data_one)
                    break
    else:
            person_total_data ={}
            person_total_data['id'] = id_user_initial
            person_total_data['id_user__name'] = i['id_user__name']
            person_total_data['attendtimes'] = attend_times
            person_total_data['attendtotal'] = attend_total
            person_total_data['attendrates'] = attend_times/attend_total
            person_total_data['person_data'] = person_data
            data_equipment_return.append(person_total_data)
    return data_equipment_return


def data_students_attendance_format(data_equipment,data_plan,id_list):
    data_equipment_return = []
    for i in data_equipment:
        data_person={}
        for j in data_plan:
            if i['param2'] ==j['id']:
                data_person['param2'] = i['param2']
                data_person['param2__id_curricula__name'] =j['id_curricula__name']
                data_person['param2__timebegin'] = j['timebegin']
                data_person['param2__timeend'] = j['timeend']
                data_person['timeupdate'] = i['timeupdate']
                data_person['idmanager__name'] =i['idmanager__name']
                data_person['time'] =i['time']
                if j['timebegin'] <= i['time'] <= j['timeend']:
                    data_person['status'] = 1
                    if j['timebegin']+j['timebegincheckend'] * 60 < i['time']:
                        data_person['status'] = 2
                elif j['timeend']+j['timecheckend'] <i['time']:
                    data_person['status'] =3
                    break
        data_equipment_return.append(data_person)
        return data_equipment_return


def data_attendance(course_plan_id,id_list,format_type,user_id):
    '''
    format_type is used to decide the type of the selection,1 represents for data attendance in personal format, 2 represents for data attendance in class format,3 represents for personal data
    '''
    data_equipment =[{'id':'test'}]
    data_plan =[1,2,3]
    if format_type == 3:
        data_equipment = list(models.TCyRunningaccount.objects.filter(id_user=user_id,param2__id_curricula = course_plan_id).values('id', 'id_user__name', 'time','type_field','param2','timeupdate','idmanager__name').order_by('param2'))
        data_plan = list(models.TCyplan.objects.filter(id_curricula = course_plan_id).values('id','timebegin','timeend','timebegincheckbegin','timebegincheckend','timeendcheckend','timeendcheckbegin').order_by('id'))
    elif format_type == 1:
        data_equipment = list(models.TCyRunningaccount.objects.filter(param2__id_curricula = course_plan_id).values('id', 'id_user__name','id_user' 'time','type_field','param2','timeupdate','idmanager__name').order_by('id_user'))
        data_plan = list(models.TCyplan.objects.filter(id_curricula = course_plan_id).values('id','timebegin','timeend','timebegincheckbegin','timebegincheckend','timeendcheckend','timeendcheckbegin').order_by('id'))
    elif format_type ==2:
        data_equipment = list(models.TCyRunningaccount.objects.filter(param2__id_curricula = course_plan_id).values('id', 'id_user__name','id_user' 'time','type_field','param2','param2__id_curricula__name','param2__timebegin','param2__timeend','timeupdate','idmanager__name').order_by('param2'))
        data_plan = list(models.TCyplan.objects.filter(id_curricula = course_plan_id).values('id','timebegin','timeend','timebegincheckbegin','timebegincheckend','timeendcheckend','timeendcheckbegin'))
    if id_list ==[]:
        for j in data_equipment:
            id_list.append(j['id'])
    if format_type == 1:
        data_equipment = data_attendance_format(data_equipment,data_plan,id_list)
    elif format_type == 2:
        data_equipment = data_attendance_class_format(data_equipment,data_plan,id_list)
    elif format_type ==3:
        data_equipment = data_students_attendance_format(
            data_equipment, data_plan, id_list)
    return data_equipment

##废除的函数
def data_attendance_class(course_plan_id,id_list,format_type,user_id):
        data_equipment = list(
            models.TCyRunningaccount.objects.filter(
                id_plan=course_plan_id,
                status__gt=0).annotate(attendnumbers=Count('id_user') ).values(
                    'time', 'attendnumbers').order_by('time'))
        data_equipment_back = list(
            models.TCyRunningaccount.objects.filter(
                id_plan=course_plan_id, ).annotate(
                    totalnumbers=Count('id_user')).values(
                        'time', 'totalnumbers').order_by('time'))
        data_personal = list(
            models.TCyRunningaccount.objects.filter(
                id_plan=course_plan_id).values('id', 'id_user__name', 'status', 'time','idmanager__name','timeupdate').order_by('time'))
        if id_list ==[]:
            for j in data_equipment_back:
                id_list.append(j['time'])
        data_equipment = data_attendance_class_format(data_equipment,data_equipment_back,data_personal)
        return data_equipment
##废除的函数
def data_students_attendance(user_id,id_list):
    data_equipment = list(models.TCyRunningaccount.objects.filter(
            id_user=user_id,status__gt = 0).annotate(attendtimes = Count('id')).values('id_plan', 'id_plan__id_curricula__name', 'id_plan__weekday','attendtimes').order_by('id_plan'))
    data_equipment_back = list(
        models.TCyRunningaccount.objects.filter(
            id_user=user_id).annotate(attendtotal=Count('id')).values(
                'id_plan', 'attendtotal').order_by('id_plan'))
    data_personal = list(models.TCyRunningaccount.objects.filter(
        id_user=user_id).values('id_plan', 'status','idmanager__name', 'timeupdate', 'time').order_by('id_plan'))
    if id_list ==[]:
        for j in data_equipment_back:
            id_list.append(j['id_plan'])
    data_equipment = data_students_attendance_format(data_equipment,data_equipment_back,data_personal)
    return data_equipment

## 创建验证码
def captcha():
    hashkey = CaptchaStore.generate_key()   #验证码答案
    image_url = captcha_image_url(hashkey)  #验证码地址
    captcha = {'hashkey': hashkey, 'image_url': image_url}
    return captcha
##刷新验证码
def refresh_captcha(request):
    return HttpResponse(dumps(captcha()), content_type='application/json')
## 验证验证码
def jarge_captcha(captchaStr, captchaHashkey):
    if captchaStr and captchaHashkey:
        try:
            # 获取根据hashkey获取数据库中的response值
            get_captcha = CaptchaStore.objects.get(hashkey=captchaHashkey)
            if get_captcha.response == captchaStr.lower():     # 如果验证码匹配
                return True
        except:
            return False
    else:
        return False
class IndexView(APIView):
    def get(self, request):
        hashkey = CaptchaStore.generate_key()  # 验证码答案
        image_url = captcha_image_url(hashkey)  # 验证码地址
        captcha = {'hashkey': hashkey, 'image_url': image_url}
        return render(request, "login.html", locals())
    def post(self,request):
        capt=request.POST.get("captcha",None)         #用户提交的验证码
        key=request.POST.get("hashkey",None)          #验证码答案
        if jarge_captcha(capt,key):
            return  HttpResponse("验证码正确")
        else:
            return HttpResponse("验证码错误")
class APIViewDelete(APIView):
    APIView_delete_request_body = Schema(
        title=' 删除数据库中的信息 ',  # 标题
        description='删除数据库中具体的id名称',  # 接口描述
        type=TYPE_OBJECT,  # 类型 "object" ,"string" ,"number" ,"integer" ,"boolean" ,"array" ,"file"
        format=None,  # 格式    date,date-time,password,binary,bytes,float,double,int32,int64,email,ipv4, ipv6, uri, uuid, slug, decimal
        enum=None,  # [列表]列举参数的请求值
        pattern=None,  # 当 format为 string是才填此项
        # 当 type为object时，为dict对象 {'str1': Schema对象, 'str2': SchemaRef对象}
        properties=delete_schema,
        required=['ids'],  # [必须的属性列表]
        items=None,  # 当type是array时，填此项
    )
    APIView_delete_responses_success = Response(
        description='APIView_delete_responses is success',
        schema=responses_success,
        examples={
            'message': '删除成功'
        }
    )
    APIView_delete_responses_fail = Response(
        description='APIView_delete_responses is failure',
        schema=responses_fail,
        examples={
            'message': '删除失败，请输入正确的id'
        }
    )

    @swagger_auto_schema(
        request_body=APIView_delete_request_body,
        manual_parameters=None,
        operation_id=None,
        operation_description='api是用来删除数据库中的给定字段',
        operation_summary=None,
        security=None,
        responses={
            204: APIView_delete_request_body,
            500: APIView_delete_request_body
        },
        tags=None)
    @get_request_args
    @csrf_exempt
    def delete(self, request,args,session):
        is_login = request.COOKIES.get('is_login')
        if not request.session.get(is_login, None):
            return HttpResponse(dumps({'code': 0}),  content_type=content_type_tmp, charset='utf-8')
        variable_name = locals()
        delete_data = args.get('ids')
        numbers_id = len(delete_data)
        for i in range(numbers_id):
            variable_name['id_'+str(i)] = delete_data[i].get('user_id')
        try:
            for i in range(1,numbers_id+1):
                models.TCyequipment.objects.filter(id = variable_name.get('id_'+str(i),'id_1')).delete()
            return HttpResponse(dumps({'message':'数据删除成功'}),  content_type=content_type_tmp, charset='utf-8')
        except Exception as error:
            return HttpResponse(dumps({'message':data_base_error_specific +str(error)}), content_type=content_type_tmp, charset='utf-8')
class Logout(APIView):
    @swagger_auto_schema(
        operation_description='The api for logout action',)
    def delete(self, request):
        is_login = request.COOKIES.get('is_login')
        if not request.session.get(is_login, None):
            return HttpResponse(dumps({'code': 0}),  content_type=content_type_tmp, charset='utf-8')
        request.session.flush()
        return HttpResponse(dumps({'code': 0}),  content_type=content_type_tmp, charset='utf-8')


class Login(APIView):
    '''
    Retrive:
    Return the login page
    '''
    #TODO:把登录的html更改为李乐晗的html
    def get(self, request):
        hashkey = CaptchaStore.generate_key()  # 验证码答案
        image_url = captcha_image_url(hashkey)  # 验证码地址
        captcha = {'hashkey': hashkey, 'image_url': image_url}
        return render(request, "login.html",locals())
    '''
    List:
    Check the Login and redirect to the Front page
    '''
    login_post_request_body = Schema(
        title='后端需要的登录字段数据',  # 标题
        description=None,  # 接口描述
        type=TYPE_OBJECT,  # 类型 "object" ,"string" ,"number" ,"integer" ,"boolean" ,"array" ,"file"
        format=None,  # 格式    date,date-time,password,binary,bytes,float,double,int32,int64,email,ipv4, ipv6, uri, uuid, slug, decimal
        enum=None,  # [列表]列举参数的请求值
        pattern=None,  # 当 format为 string是才填此项
        # 当 type为object时，为dict对象 {'str1': Schema对象, 'str2': SchemaRef对象}
        properties={
            'user_id': Schema(
                title='登录者的账号名',
                description='登录者的账号名，对应的是nouser字段相当于账号的唯一标识（相当于学生学号）',
                type=TYPE_INTEGER,
                format='int32',
            ),
            'password': Schema(
                title='密码 ',
                description='登录者账号的密码 ',
                type=TYPE_STRING,
                format='string',
            )
        },
        required=['userid', 'psw'],  # [必须的属性列表]
        items=None,  # 当type是array时，填此项
    )
    login_post_responses_success = Response(
        description='The Response data if login is success',
        schema=Schema(
            title='登录成功的响应值',
            type=TYPE_OBJECT,
            properties={
                'userid': Schema(
                    title='登录者的账号名',
                    description='登录者的账号名，对应的是nouser字段相当于账号的唯一标识（相当于学生学号）',
                    type=TYPE_INTEGER,
                    format='int32',
                ),
                'psw': Schema(
                    title='密码 ',
                    description='登录者账号的密码 ',
                    type=TYPE_STRING,
                    format='string',
                ),
                'status': Schema(
                    title='状态',
                    description='1代表登录成功，2代表登录不成功',
                    type=TYPE_STRING,
                    format='string',
                )
            }
        ),
        examples={
            'uerid': 1910404051,
            'psw': '123456',
            'status': '0'
        }
    )
    login_post_responses_fail = Response(
        description='登录失败的响应值',
        schema=Schema(
            title='The Response is fail',
            description='test',
            type=TYPE_STRING,
            format='string',
        ),
        examples={'message': 'fail'}
    )

    @swagger_auto_schema(
        request_body=login_post_request_body,
        manual_parameters=None,
        operation_id=None,
        operation_description='登录成功的端口',
        operation_summary=None,
        security=None,
        responses={
            200: login_post_responses_success,
            401: login_post_responses_fail
        },
        tags=None)
    @get_request_args
    @csrf_exempt
    def post(self, request,args,session):
        print(1)
        if request.session.get('is_login', False):
            # 如果本来就未登录，也就没有登出一说
            data_attr = request.session['user_group_id']
            urls = {'0': '/polls/SuperAdministration/',
                    '1': '/polls/AcademicAdministration/',
                    '2': '/polls/Counsellor/',
                    '3': '/polls/Teacher/',
                    '4': '/polls/Student/'
                    }
            if data_attr == 4 :
                return render(request, "login.html")
            else:
                return HttpResponse(dumps({'code':1}),  content_type=content_type_tmp, charset='utf-8')
        # Get the user_id and password from the front page
        user_id =args.get("user_id")
        password = args.get("password")
        print(2)
        if len(str(user_id)) == 0 or len(password) == 0:
            return HttpResponse(dumps({'message': '请输入用户名和密码'}),  content_type=content_type_tmp, charset='utf-8')
        # select data from database based on the id of the user.
        data = tuple(models.TCyuser.objects.filter(nouser=int(user_id)).values())
        if data == ():
            return HttpResponse(dumps({'message': "用户名不存在，重新输入用户名或者进行注册"}),  content_type=content_type_tmp, charset='utf-8')
        else:
            data = data[0]
            data_password = data.get('psw', None)
            data_attr = data.get('attr', None)
            user_id = data.get('id', None)
            if data_password != password:
                return HttpResponse(dumps({'message': '登录失败'}), content_type=content_type_tmp, charset='utf-8')
            # 若用户名或密码失败,则将提示语与跳转链接继续传递到前端
            else:
                http_response =  HttpResponse(dumps({'code':1}),  content_type=content_type_tmp, charset='utf-8')
                is_login = str(uuid4())
                user_id_session = str(uuid4())
                user_group_id = str(uuid4())
                http_response.set_cookie("is_login",is_login)
                http_response.set_cookie('user_id',user_id_session)
                http_response.set_cookie('user_group_id',user_group_id)
                # 2.设置session的值
                request.session[is_login] = True
                request.session[user_id_session] = user_id
                request.session[user_group_id] = data_attr
                urls = {'0': '/polls/SuperAdministration/',
                        '1': '/polls/AcademicAdministration/',
                        '2': '/polls/Counsellor/',
                        '3': '/polls/Teacher/',
                        '4': '/polls/Student/'
                        }
                if data_attr == 4 :
                    return render(request, 'base.html')
                else:
                    print(3)
                    return http_response


class SuperAdminstration(APIView):
    def get(self, request):
        if not request.session.get('is_login', None):
            # 如果本来就未登录，也就没有登出一说
            return redirect(tmp)
        status = request.session.get('is_login')
        userid = request.session.get('user_id')
        if not status:
            return redirect('/login/')
        with connection.cursor() as cursor:
            cursor.execute(
                "select Nocard,NoUser,Name,Psw,Deptid, sex,attr from T_CyUser where Id=%s" % userid)
            data = cursor.fetchall()
            cursor.execute(
                "select Photo from T_CyUserEx where Id=%s" % userid
            )
            data_photo = cursor.fetchall()
        error_msg = ''
        if data == []:
            error_msg = {'message': "用户不存在，请重新输入"}
        else:
            data_name = ('Nocard', 'NoUser', 'Name',
                         'Psw', 'Deptid', 'sex', 'attr')
            data_result = dict(zip(data_name, data))
            #t = {"data": {
            #        "user_id": userid,
            #        "user_name": data[0][2],
            #        "password": data[0][3],
            #        "user_groupid": data[0][-1],
            #        "user_photo": data_photo[0][0],
            #    }
            #}
            return render(request, 'index.html', data_result)

    def post(self, request):
        status = request.session.get('is_login')
        userid = request.session.get('userid')
        with connection.cursor() as cursor:
            cursor.execute(
                "select Nocard,NoUser,Name,Psw,Deptid, sex,attr from T_CyUser where Id=%s" % userid)
            data = cursor.fetchall()
            cursor.execute(
                "select Photo from T_CyUserEx where Id=%s" % userid
            )
            data_photo = cursor.fetchall()
        error_msg = ''
        if data == []:
            error_msg = {'message': "用户不存在，请重新输入"}
        elif data[0][-1] == 0 or data[0][-1] == 1:
            with connection.cursor() as cursor:
                cursor.execute(
                    "select * from T_CyUser ")
                data = cursor.fetchall()
            data_name = tuple(models.TCyuser._meta.fields)
            data_result = []
            for i in data:
                tmp = dict(zip(data_name, i))
                data_result.append(tmp)
            return HttpResponse(dumps(data_result))
        else:
            data_name = (
                'Nocard', 'NoUser', 'Name',
                'Psw', 'Deptid', 'sex', 'attr'
            )
            data_result = dict(zip(data_name, data))
            t = {
                "data": {
                    "user_id": userid,
                    "user_name": data[0][2],
                    "password": data[0][3],
                    "user_groupid": data[0][-1],
                    "user_photo": data_photo[0][1],
                }
            }
            # return HttpResponse(t)
            return render(request, 'index.html', t)


class AcademicAdminstration(APIView):
    def get(self, request):
        userid = request.session.get('userid')
        return HttpResponse(dumps({'result': userid}, ensure_ascii=False))


class Counsellor(APIView):
    pass


class Teacher(APIView):
    pass


class Student(APIView):
    def get(self, request, userid):
        with connection.cursor() as cursor:
            cursor.execute('select ')

    def post(self, request, userid):
        course_name = request.POST.get("CourseName")
        with connection.cursor() as cursor:
            cursor.execute('select ')


class PersonInformation(APIView):
    data_schema = {
    'id': Schema(
        title='ID',
        description='使用者的id',
        type=TYPE_INTEGER,
        format='int32',
    ),
    'id__nocard': Schema(
        title='ID of card ',
        description='用户的卡号',
        type=TYPE_STRING,
        format='string',
    ),
    'id__nouser': Schema(
        title='ID of user ',
        description='用户的身份id（比如学生的id就是他自己的学号）',
        type=TYPE_STRING,
        format='string',
    ),
    'id__name': Schema(
        title=name_user,
        description=name_user,
        type=TYPE_STRING,
        format='string'
    ),
    'id__psw': Schema(
        title=psw_word,
        description=psw_word,
        type=TYPE_STRING,
        format='string'
    ),
    'id__deptid__name': Schema(
        title='部门',
        description='用户所属的部门名称',
        type=TYPE_STRING,
        format='string'
    ),
    'id__sex': Schema(
        title='性别',
        description='用户的性别，0代表女性，1代表男性',
        enum=[0, 1],
        type=TYPE_INTEGER,
        format='int32',
    ),
    'id__attr': Schema(
        title='权限',
        description='用户管理权限，0代表超级管理员，1代表教务处管理员，2代表辅导员，3代表教师，4代表学生',
        enum=[0, 1, 2, 3, 4],
        type=TYPE_INTEGER,
        format='int32',
    ),
    'id__timeupdate': Schema(
        title='信息更新时间',
        description=time_update_database,
        type=TYPE_INTEGER,
        format='int32',
    ),
    'id__localid': Schema(
        title='管理员地点',
        description=' 管理员所在的地点',
        type=TYPE_STRING,
        format='string'
    ),
    'timeupdate': Schema(
        title='timeupdate',
        description=time_update_database,
        type=TYPE_INTEGER,
        format='int32',
    ),
    'idmanager__name': Schema(
        title='管理员姓名',
        description='修改账户的管理员姓名',
        type=TYPE_STRING,
        format='string'
    ),
    'rem': Schema(
        title='描述',
        description='照片的描述',
        type=TYPE_STRING,
        format='string'
    ),
    'photo': Schema(
        title='照片',
        description='照片',
        type=TYPE_FILE,
    ),
    }
    PersonInformation_get_responses_success = Response(
        description='成功获取信息的响应',
        schema=Schema(
            title='成功数据',
            description='成功数据',
            type=TYPE_OBJECT,
            properties=data_schema
        ), examples=None
    )
    PersonInformation_get_responses_fail = Response(
        description='获取失败的响应',
        schema=responses_fail,
            examples={
            'message': '运行报错'}
    )
    @swagger_auto_schema(
        request_body=None,
        manual_parameters=None,
        operation_id=None,
        operation_description='获取所有登录个人信息',
        operation_summary=None,
        security=None,
        responses={
            200: PersonInformation_get_responses_success,
            404: PersonInformation_get_responses_fail
            },
        tags=None)
    @get_request_args
    @csrf_exempt
    def get(self, request,args,session):
        is_login = request.COOKIES.get('is_login')
        if not request.session.get(is_login, None):
            return HttpResponse(dumps({'code': 0}),  content_type=content_type_tmp, charset='utf-8')
        user_id = request.COOKIES.get('user_id')
        user_id = request.session.get(user_id)
        print(user_id)
        data_user = list(models.TCyuserex.objects.filter(
            id__nouser=user_id).values('id', 'id__nocard', 'id__nouser', 'id__name', 'id__psw', 'id__deptid__name', 'id__sex', 'id__attr', 'id__timeupdate', 'timeupdate', 'idmanager__name', 'rem', 'photo', 'id__localid'))
        print(data_user)
        if data_user == []:
            return HttpResponse(dumps({'message': "数据库出现错误，请联系管理员"}), content_type=content_type_tmp, charset='utf-8')
        data_user = data_user[0]
        #timeArray = localtime(946656000+data_user['timeupdate'])
        #data_user['timeupdate']= strftime("%Y-%m-%d %H:%M:%S", timeArray)
        return HttpResponse({'message': 'Success', 'data': [data_user]},  content_type=content_type_tmp, charset='utf-8')

    PersonInformation_patch_request_body = Schema(
        title="为修改个人信息更改的请求",  # 标题
        description='向前端请求信息的具体内容',  # 接口描述
        type=TYPE_OBJECT,  # 类型 "object" ,"string" ,"number" ,"integer" ,"boolean" ,"array" ,"file"
        format=None,  # 格式    date,date-time,password,binary,bytes,float,double,int32,int64,email,ipv4, ipv6, uri, uuid, slug, decimal
        enum=None,  # [列表]列举参数的请求值
        pattern=None,  # 当 format为 string是才填此项
        # 当 type为object时，为dict对象 {'str1': Schema对象, 'str2': SchemaRef对象}
        properties=data_schema,
        required=None,  # [必须的属性列表]
        items=None,  # 当type是array时，填此项
    )
    PersonInformation_patch_responses_success = Response(
        description='修改信息成功',
        schema=responses_success,
        examples={
            'message': patch_success
        }
    )
    PersonInformation_patch_responses_fail = Response(
        description='修改信息失败',
        schema=responses_fail,
        examples={
            'message': patch_error
        }
    )

    @swagger_auto_schema(
        request_body=PersonInformation_patch_request_body,
        manual_parameters=None,
        operation_id=None,
        operation_description='这个端口被用来修改登录者本身的信息',
        operation_summary=None,
        security=None,
        responses={
            201: PersonInformation_patch_responses_success,
            401: PersonInformation_patch_responses_fail},
        tags=None)
    @get_request_args
    @csrf_exempt
    def patch(self, request,args,session):
        is_login = request.COOKIES.get('is_login')
        if not request.session.get(is_login, None):
            return HttpResponse(dumps({'code': 0}),  content_type=content_type_tmp, charset='utf-8')
        data_patch_name = args.get('name', None)
        data_patch_psw = args.get('psw', None)
        data_patch_sex = args.get('sex', None)
        data_patch_rem = args.get('rem', None)
        data_patch_photo = args.get('photo', None)
        if not(data_patch_name or data_patch_sex or data_patch_rem or data_patch_photo or data_patch_psw):
            return HttpResponse(dumps({'message': patch_success}, content_type=content_type_tmp, charset='utf-8'))
        user_id = request.COOKIES.get('user_id')
        print(user_id)
        user_id = request.session.get(user_id)
        print(user_id)
        time_update = int(time())-946656000
        if data_patch_name or data_patch_sex or data_patch_psw:
            data_user = list(
                models.TCyuser.objects.filter(id__nouser=user_id).values())
            if data_user == []:
                return HttpResponse(dumps({'message': data_base_error}), content_type=content_type_tmp, charset='utf-8')
            else:
                data_user = data_user[0]
                data_user['name'] = args.get('name', data_user['name'])
                data_user['psw'] = args.get('psw', data_user['psw'])
                data_user['sex'] = args.get('name', data_user['sex'])
                data_user['idmanager'] = user_id
                data_user['timeupdate'] = time_update
                sex_dic = {'男': 1, '女': 0}
                data_user['sex'] = sex_dic.get(data_user['sex'])
                models.TCyuser.objects.filter(id=user_id).update(
                    name=data_user.get('name'),
                    psw=data_user.get('psw'),
                    sex=data_user.get('sex'),
                    idmanager=data_user.get('idmanager'),
                    timeupdate=data_user.get('timeupdate')
                )
            return HttpResponse(dumps({'message': patch_success},  content_type=content_type_tmp, charset='utf-8'))
        if data_patch_rem or data_patch_photo:
            data_user_extend = list(
                models.TCyuserex.objects.filter(id=user_id).values())
            if data_user_extend == []:
                return HttpResponse(dumps({'message': data_base_error}), content_type=content_type_tmp, charset='utf-8')
            else:
                data_user_extend = data_user_extend[0]
                data_user_extend['rem'] = args.get(
                    'name', data_user_extend['rem'])
                data_user_extend['photo'] = args.get(
                    'name', data_user_extend['photo'])
                data_user_extend['idmanager'] = user_id
                data_user_extend['timeupdate'] = time_update
                models.TCyuserex.objects.filter(id=user_id).update(
                    rem=data_user_extend.get('rem'),
                    photo=data_user_extend.get('photo'),
                    idmanager=data_user_extend.get('idmanager'),
                    timeupdate=data_user_extend.get('timeupdate')
                )
            return HttpResponse(dumps({'message': patch_success}, content_type=content_type_tmp, charset='utf-8'))
        return HttpResponse(dumps({'message': data_base_error}), content_type=content_type_tmp, charset='utf-8')


class IDEvaluation(APIView):
    '''
    List:
    Check the id information about user,equipment,course,login user
    '''
    IDEvaluation_post_request_body = Schema(
        title='验证id的请求响应',  # 标题
        description='用于验证id是否存在于对应的的数据库中',  # 接口描述
        type=TYPE_OBJECT,  # 类型 "object" ,"string" ,"number" ,"integer" ,"boolean" ,"array" ,"file"
        format=None,  # 格式    date,date-time,password,binary,bytes,float,double,int32,int64,email,ipv4, ipv6, uri, uuid, slug, decimal
        enum=None,  # [列表]列举参数的请求值
        pattern=None,  # 当 format为 string是才填此项
        # 当 type为object时，为dict对象 {'str1': Schema对象, 'str2': SchemaRef对象}
        properties={
            'kind': Schema(
                title=' 选择想要验证的数据库',
                description=' 1 表示验证所有用户是否存在，扩展信息是否存在；2 表示验证验证设备是否存在；3表示验证课程是否存在；4 表示验证考勤记录的id是否存在；5表示验证部门id是否存在；6表示验证地点id是否存在；7表示课程安排id是否存在；8表示媒体信息的id是否存在，9表示搜索typera表中的数据是否存在',
                type=TYPE_INTEGER,
                format='int32',
                enum=[1, 2, 3,4,5,6,7,8,9],
            ),
            'id': Schema(
                title=' id数据',
                description='表示想要验证的id数据',
                type=TYPE_INTEGER,
                format='int32',
            ),
        },
        required=['kind', 'id'],  # [必须的属性列表]
        items=None,  # 当type是array时，填此项
    )
    IDEvaluation_post_responses_success = Response(
        description='post请求成功的时候',
        schema=responses_success,
        examples={
            'message': post_success
        }
    )
    IDEvaluation_post_responses_fail = Response(
        description='post请求失败的时候',
        schema=responses_fail,
        examples={
            'message': post_error
        }
    )

    @swagger_auto_schema(
        request_body=IDEvaluation_post_request_body,
        manual_parameters=None,
        operation_id=None,
        operation_description='用于验证规定数据库内是否存在需要验证的id',
        operation_summary='Evaluation',
        security=None,
        responses={201: IDEvaluation_post_responses_success,
                   401: IDEvaluation_post_responses_fail},
        tags=None)
    @get_request_args
    @csrf_exempt
    def post(self, request,args,session):
        '''
        This method is to varify id information about user,equipment,course,login user.
        '''
        id_evaluation = args.get('id', None)
        kind_evaluation = args.get('kind', None)
        data = []
        if not(id_evaluation or kind_evaluation):
            return HttpResponse(dumps({'message': '请勿空提交'}), content_type=content_type_tmp, charset='utf-8')
        if kind_evaluation == 1:
            data = list(models.TCyuser.objects.filter(
                id=id_evaluation).values())
        elif kind_evaluation == 2:
            data = list(models.TCyequipment.objects.filter(
                id=id_evaluation).values())
        elif kind_evaluation == 3:
            data = list(models.TCycurricula.objects.filter(
                id=id_evaluation).values())
        elif kind_evaluation == 4:
            data = list(models.TCyRunningaccount.objects.filter(
                id=id_evaluation).values())
        elif kind_evaluation ==5:
            data = list(models.TCydept.objects.filter(
                id=id_evaluation).values())
        elif kind_evaluation ==6:
            data = list(models.TCylocation.objects.filter(
                id=id_evaluation).values())
        elif kind_evaluation ==7:
            data = list(models.TCyplan.objects.filter(
                id=id_evaluation).values())
        elif kind_evaluation==8:
            data = list(models.TCymmx.objects.filter(
                id=id_evaluation).values())
        elif kind_evaluation==9:
            data = list(models.TCytypera.objects.filter(
                id=id_evaluation).values())
        if data == []:
            return HttpResponse(dumps({'message': 'id不存在'}),  content_type=content_type_tmp, charset='utf-8')
        else:
            return HttpResponse(dumps({'message': 'id存在'}),  content_type=content_type_tmp, charset='utf-8')


class EquipmentInformation(APIViewDelete):
    '''
    list
    list all information about Equipment
    '''
    data_schema = {
        'id': Schema(
            title='设备的id',
            description=id_in_use,
            type=TYPE_INTEGER,
            format='int32',
            enum=None,
        ),
        'name': Schema(
            title='设备名称',
            description='设备名称',
            type=TYPE_STRING,
            format='string',
            enum=None,
        ),
        'id_location__name': Schema(
            title='设备所在地点的名称',
            description='设备所在地点的名称',
            type=TYPE_STRING,
            format='string',
            enum=None,
        ),
        'id_location_sn': Schema(
            title='设备所在位置内部的编号',
            description='设备所在位置的内部编号',
            type=TYPE_INTEGER,
            format='int32',
            enum=None,
        ),
        'id_ip': Schema(
            title='设备的ip地址',
            description='设备所有的IP地址，例如192.168.0.222',
            type=TYPE_STRING,
            format='string',
            enum=None,
        ),
        'mac': Schema(
            title='设备的mac地址  ',
            description='设备的mac地址，例如xx-xx-xx-xx-xx-xx',
            type=TYPE_STRING,
            format='string',
            enum=None,
        ),
        'state': Schema(
            title=' 设备状态 ',
            description='设备状态，0：正常空闲、1：故障、2：其它、3：正常使用中、4开放，必须有值',
            type=TYPE_INTEGER,
            format='int32',
            enum=[0, 1, 2, 3, 4],
        ),
        'login': Schema(
            title='登录状态',
            description='登录状态，0：未登录、1：已经登录',
            type=TYPE_INTEGER,
            format='int32',
            enum=[0, 1],
        ),
        'link': Schema(
            title=' 设备网络连接状态 ',
            description=' 网络状态，0：脱机、1：在线，必须有值 ',
            type=TYPE_INTEGER,
            format='int32',
            enum=[0, 1],
        ),
        'class_field': Schema(
            title=' 设备种类 ',
            description=' 设备种类，0：PC设备、2：刷卡设备，必须有值',
            type=TYPE_STRING,
            format='string',
            enum=[0, 1],
        ),
        'dx': Schema(
            title='设备的像素x位置信息',
            description=' Layout显示坐标位置x（单位像素），必须有值 ',
            type=TYPE_INTEGER,
            format='int32',
            enum=None,
        ),
        'dy': Schema(
            title=' 设备的像素y位置信息 ',
            description=' Layout显示坐标位置y（单位像素），必须有值 ',
            type=TYPE_INTEGER,
            format='int32',
            enum=None,
        ),
        'id_user__name': Schema(
            title=' 使用者的姓名 ',
            description=' 使用者的姓名 ',
            type=TYPE_STRING,
            format='string',
            enum=None,
        ),
        'id_plan': Schema(
            title=' 设备所关联的课程安排表id',
            description=' 设备所关联的课程安排表id  ',
            type=TYPE_INTEGER,
            format='int32',
            enum=None,
        ),
        'itimebegin': Schema(
            title=no_idea,
            description=no_idea,
            type=TYPE_STRING,
            format='int32',
            enum=None,
        ),
        'itimelogin': Schema(
            title=no_idea,
            description=no_idea,
            type=TYPE_STRING,
            format='int32',
            enum=None,
        ),
        'whitelist': Schema(
            title=no_idea,
            description=no_idea,
            type=TYPE_STRING,
            format='string',
            enum=None,
        ),
        'rem': Schema(
            title=' 设备说明 ',
            description='设备说明',
            type=TYPE_STRING,
            format='string',
            enum=None,
        ),
        'timeupdate': Schema(
            title=' 更新时间 ',
            description=' 记录最后更新时间；（2000-1-1 0:0:0 经过的秒），必须有值 ',
            type=TYPE_STRING,
            format='int32',
            enum=None,
        ),
        'idmanager__name': Schema(
            title=' 最后修改信息的管理员 ',
            description=' 最后修改信息的管理员的姓名 ',
            type=TYPE_STRING,
            format='string',
            enum=None,
        ),
        'portlisten': Schema(
            title=' 数据端口 ',
            description=' 接收数据端口,默认:1234，必须有值',
            type=TYPE_INTEGER,
            format='int32',
            enum=None,
        ),
        'type_field': Schema(
            title=' 刷卡器类型,默认:31，必须有值 ',
            description=' 刷卡器类型,默认:31，必须有值 ',
            type=TYPE_INTEGER,
            format='int32',
            enum=None,
        ),
        'timedelay': Schema(
            title=' 开门延迟时间 ',
            description=' 门禁开门延时,默认:5秒，必须有值  ',
            type=TYPE_INTEGER,
            format='int32',
            enum=None,
        ),
        'keycance': Schema(
            title=' 取消键键码,11，必须有值 ',
            description=' 取消键键码,11，必须有值',
            type=TYPE_INTEGER,
            format='int32',
            enum=None,
        ),
        'keyOk': Schema(
            title=' 确定键键码,14，必须有值 ',
            description=' 确定键键码,14，必须有值',
            type=TYPE_INTEGER,
            format='int32',
            enum=None,
        ),
        'keydel': Schema(
            title=' 删除键键码,13，必须有值 ',
            description=' 删除键键码,13，必须有值',
            type=TYPE_INTEGER,
            format='int32',
            enum=None,
        ),
        'keyf1': Schema(
            title=' 功能键键码,12，必须有值 ',
            description=' 功能键键码,12，必须有值',
            type=TYPE_INTEGER,
            format='int32',
            enum=None,
        ),
        'onall': Schema(
            title=' 门禁刷卡总是开门,默认:1总是开门、1校验成功后开门，必须有值 ',
            description=' 门禁刷卡总是开门,默认:1总是开门、1校验成功后开门，必须有值',
            type=TYPE_INTEGER,
            format='int32',
            enum=None,
        ),
        'rangeequs': Schema(
            title=' 管理设备范围，必须有值 ',
            description=' 管理设备范围，必须有值 ',
            type=TYPE_STRING,
            format='string',
            enum=None,
        ),
        'listplace': Schema(
            title=' 管理地点范围，必须有值 ',
            description='管理地点范围，必须有值 ',
            type=TYPE_STRING,
            format='string',
            enum=None,
        )
    }
    data_schema_present = Schema(
    title ='查询成功的返回',
    description = '查询成功返回的函数值',
    type = TYPE_OBJECT,  # 类型
    properties = data_schema
        )
    get_responses_success = Schema(
        title='成功获取查询数据',
        description='这个接口用于展示成功获取全部数据的格式',
        type=TYPE_OBJECT,
        properties={
                    'page': Schema(
                        title='表示当前的页码数',
                        description=' 表示你现在想要展示的页码数',
                        type=TYPE_INTEGER,
                        format='int32'
                    ),
            'limits': Schema(
                        title='行数',
                        description='表示你想展示在一页上展示的数据行数',
                        type=TYPE_INTEGER,
                        format='int32'
                    ),
            'total_number': Schema(
                        title='页数',
                        description='表示总页数',
                        type=TYPE_INTEGER,
                        format='int32'
                    ),
            'data': Schema(
                        title='数据',
                        description='用于传递查询到的全部数据',
                        type=TYPE_OBJECT,
                        properties = [data_schema_present,data_schema_present]
                    ),
        }
    )
    EquipmentInformation_get_responses_success = Response(
        description= '查询成功返回的响应',
        schema=get_responses_success,
        examples=None,
    )
    EquipmentInformation_get_responses_fail = Response(
        description='查询失败返回的响应',
        schema=responses_fail,
        examples={
            'message': patch_error
        }
    )

    @swagger_auto_schema(
        request_body=None,
        manual_parameters=None,
        operation_id=None,
        operation_description='获取设备的信息的端口',
        operation_summary=None,
        security=None,
        responses={
            200: EquipmentInformation_get_responses_success,
            401: EquipmentInformation_get_responses_fail
        },
        tags=None)
    @get_request_args
    @csrf_exempt
    def get(self, request,args,session):
        is_login = request.COOKIES.get('is_login')
        if not request.session.get(is_login, None):
            return HttpResponse(dumps({'code': 0}),  content_type=content_type_tmp, charset='utf-8')
        pages = int(args.get('page', 1))
        limits = int(args.get('limits', 20))
        data_equipment = models.TCyequipment.objects.all().values(
            'id', 'name', 'id_location__name', 'id_location_sn', 'id_ip', 'mac', 'state', 'login', 'link', 'class_field', 'dx', 'dy', 'id_user__name', 'id_plan', 'itimebegin', 'itimelogin', 'whitelist', 'rem', 'timeupdate', 'idmanager__name', 'portlisten', 'type_field', 'timedelay', 'keycancel', 'keyOk', 'keydel', 'keyf1', 'onall', 'rangeequs', 'listplaces'
            )
        return data_total_response(data_equipment,pages,limits)


    '''
    list
    list all information about Equipment
    '''
    EquipmentInformation_post_request_body = Schema(
        title=' 查询设备信息 ',  # 标题
        description=' 获取设备信息需要的数据 ',  # 接口描述
        type=TYPE_OBJECT,  # 类型 "object" ,"string" ,"number" ,"integer" ,"boolean" ,"array" ,"file"
        format=None,  # 格式    date,date-time,password,binary,bytes,float,double,int32,int64,email,ipv4, ipv6, uri, uuid, slug, decimal
        enum=None,  # [列表]列举参数的请求值
        pattern=None,  # 当 format为 string是才填此项
        # 当 type为object时，为dict对象 {'str1': Schema对象, 'str2': SchemaRef对象}
        properties=post_search,
        required=['input_string'],  # [必须的属性列表]
        items=None,  # 当type是array时，填此项
    )
    EquipmentInformation_post_responses_success = Response(
        description='查询设备信息查询成功',
        schema=get_responses_success,
    )
    EquipmentInformation_post_responses_fail = Response(
        description='查询设备信息查询失败',
        schema=responses_fail,
        examples={
            'message': post_error
        }
    )

    @swagger_auto_schema(
        request_body=EquipmentInformation_post_request_body,
        manual_parameters=None,
        operation_id=None,
        operation_description='这个端口用于查询设备信息数据',
        operation_summary=None,
        security=None,
        responses={
            201: EquipmentInformation_post_responses_success,
            400: EquipmentInformation_post_responses_fail
        },
        tags=None)
    @get_request_args
    @csrf_exempt
    def post(self, request,args,session):
        is_login = request.COOKIES.get('is_login')
        if not request.session.get(is_login, None):
            return HttpResponse(dumps({'code': 0}),  content_type=content_type_tmp, charset='utf-8')
        input_string = args.get('input_string', None)
        pages = int(args.get('page', 1))
        limits = int(args.get('limits', 20))
        if input_string == None:
            data_equipment = models.TCyequipment.objects.all().values(
            'id', 'name', 'id_location__name', 'id_location_sn', 'id_ip', 'mac', 'state', 'login', 'link', 'class_field', 'dx', 'dy', 'id_user__name', 'id_plan', 'itimebegin', 'itimelogin', 'whitelist', 'rem', 'timeupdate', 'idmanager__name', 'portlisten', 'type_field', 'timedelay', 'keycancel', 'keyOk', 'keydel', 'keyf1', 'onall', 'rangeequs', 'listplaces')
        else:
            input_string = input_string.strip()
            try:
                test_input = eval(input_string)
            except NameError:
                test_input = input_string
            if isinstance(test_input,int):
                data_equipment = models.TCyequipment.objects.filter(
                    Q(id=test_input) |
                    Q(id_location_sn=test_input) |
                    Q(id_location = test_input)|
                    Q( id_user = test_input )|
                    Q( idmanager = test_input )|
                    Q(id_ip___icontains=str(test_input)) |
                    Q(mac___icontains=str(test_input)) |
                    Q(state=test_input) |
                    Q(login=test_input) |
                    Q(link=test_input) |
                    Q(class_field=test_input) |
                    Q(dx=test_input) |
                    Q(dy=test_input) |
                    Q(id_plan=test_input) |
                    Q(itimebegin=test_input) |
                    Q(itimelogin=test_input) |
                    Q(timeupdate=test_input) |
                    Q(portlisten=test_input) |
                    Q(type=test_input) |
                    Q(timedelay=test_input) |
                    Q(keycancel=test_input) |
                    Q(keyOk=test_input) |
                    Q(keydel=test_input) |
                    Q(keyf1=test_input) |
                    Q(onall=test_input)
                ).values(            'id', 'name', 'id_location__name', 'id_location_sn', 'id_ip', 'mac', 'state', 'login', 'link', 'class_field', 'dx', 'dy', 'id_user__name', 'id_plan', 'itimebegin', 'itimelogin', 'whitelist', 'rem', 'timeupdate', 'idmanager__name', 'portlisten', 'type_field', 'timedelay', 'keycancel', 'keyOk', 'keydel', 'keyf1', 'onall', 'rangeequs', 'listplaces')
            else:
                data_equipment = models.TCyequipment.objects.filter(
                    Q(name__icontains=input_string) |
                    Q(whitelist__icontains=input_string) |
                    Q(id_location__name__icontains=input_string) |
                    Q(id_user__name__icontains=input_string) |
                    Q(idmanager__name__icontains=input_string) |
                    Q(rem__icontains=input_string) |
                    Q(rangeequs__icontains=input_string) |
                    Q(listplaces__icontains=input_string)
                ).values(            'id', 'name', 'id_location__name', 'id_location_sn', 'id_ip', 'mac', 'state', 'login', 'link', 'class_field', 'dx', 'dy', 'id_user__name', 'id_plan', 'itimebegin', 'itimelogin', 'whitelist', 'rem', 'timeupdate', 'idmanager__name', 'portlisten', 'type_field', 'timedelay', 'keycancel', 'keyOk', 'keydel', 'keyf1', 'onall', 'rangeequs', 'listplaces')
        return data_total_response(data_equipment,pages,limits)

    '''
    list
    list all information about Equipment
    '''
    EquipmentInformation_put_data_schema = deepcopy(data_schema)
    EquipmentInformation_put_data_schema['id_location'] = Schema(
            title=' the location of equipment',
            description='to specific location',
            type=TYPE_INTEGER,
            format='int32',
            enum=None,
        ),
    EquipmentInformation_put_data_schema['id_user'] = Schema(
        title=' user ',
        description=' user who is in use of equipment ',
        type=TYPE_INTEGER,
        format='int32',
        enum=None,
    ),
    EquipmentInformation_put_data_schema['idmanager'] = Schema(
        title=' manager ',
        description=' who has update the information of equipment ',
        type=TYPE_INTEGER,
        format='int32',
        enum=None,
    ),
    del EquipmentInformation_put_data_schema['id_location__name']
    del EquipmentInformation_put_data_schema['id_user__name']
    del EquipmentInformation_put_data_schema['idmanager__name']
    EquipmentInformation_put_request_body = Schema(
        title=' put请求向前端请求添加数据的数据 ',  # 标题
        description='向数据库内部添加数据',  # 接口描述
        type=TYPE_OBJECT,  # 类型 "object" ,"string" ,"number" ,"integer" ,"boolean" ,"array" ,"file"
        format=None,  # 格式    date,date-time,password,binary,bytes,float,double,int32,int64,email,ipv4, ipv6, uri, uuid, slug, decimal
        enum=None,  # [列表]列举参数的请求值
        pattern=None,  # 当 format为 string是才填此项
        # 当 type为object时，为dict对象 {'str1': Schema对象, 'str2': SchemaRef对象}
        properties=EquipmentInformation_put_data_schema,
        required=['id', 'name', 'id_location', 'id_location_sn',
                             'id_ip', 'mac', 'state', 'login', 'link', 'class_field', 'dx', 'dy', 'id_user', 'id_plan', 'itimebegin', 'whitelist', 'rem', 'timeupdate', 'idmanager', 'portlisten', 'type_field', 'timedelay', 'keycance', 'keyOk', 'keydel', 'keyf1', 'onall', 'rangeequs', 'listplace'],  # [必须的属性列表]
        items=None,  # 当type是array时，填此项
    )
    EquipmentInformation_put_responses_success = Response(
        description='向数据库内增加设备信息成功的响应',
        schema=responses_success,
        examples={
            'message': put_success
        }
    )
    EquipmentInformation_put_responses_fail = Response(
        description='向数据库内增加设备信息失败的响应',
        schema=responses_fail,
        examples={
            'message': put_error
        }
    )

    @swagger_auto_schema(
        request_body=EquipmentInformation_put_request_body,
        manual_parameters=None,
        operation_id=None,
        operation_description='向数据库内部添加设备信息',
        operation_summary=None,
        security=None,
        responses={
            201: EquipmentInformation_put_responses_success,
            400: EquipmentInformation_put_responses_fail
        },
        tags=None)
    @get_request_args
    @csrf_exempt
    def put(self, request,args,session):
        '''
        This method is to use to add equipment information
        '''
        field_name = ['id', 'name', 'id_location', 'id_location_sn',
                      'id_ip', 'mac', 'state', 'login', 'link', 'class_field', 'dx', 'dy', 'id_user', 'id_plan', 'itimebegin', 'whitelist', 'rem', 'timeupdate', 'idmanager', 'portlisten', 'type_field', 'timedelay', 'keycance', 'keyOk', 'keydel', 'keyf1', 'onall', 'rangeequs', 'listplace']
        is_login = request.COOKIES.get('is_login')
        if not request.session.get(is_login, None):
            return HttpResponse(dumps({'code': 0}),  content_type=content_type_tmp, charset='utf-8')
        variable_name = locals()
        for i in field_name:
            if args[i]==0:
                variable_name[i]=data_equipment[i]
            else:
                variable_name[i] = args.get(i, data_equipment[i])
        user_id = request.COOKIES.get('user_id')
        user_id = request.session.get(user_id)
        variable_name['idmanager'] = user_id
        # 批量命名变量
        try:
            ueses_tmp=models.TCyequipment.objects.create(
                id=variable_name.get('id'),
                name=variable_name.get('name'),
                id_location=variable_name.get('id_location'),
                id_location_sn=variable_name.get('id_location_sn'),
                id_ip=variable_name.get('id_ip'),
                mac=variable_name.get('mac'),
                state=variable_name.get('state'),
                login=variable_name.get('login'),
                link=variable_name.get('link'),
                class_field=variable_name.get('class_field'),
                dx=variable_name.get('dx'),
                dy=variable_name.get('dy'),
                id_user=variable_name.get('id_user'),
                id_plan=variable_name.get('id_plan'),
                itimebegin=variable_name.get('itimebegin'),
                whitelist=variable_name.get('whitelist'),
                rem=variable_name.get('rem'),
                timeupdate=variable_name.get('timeupdate'),
                idmanager=variable_name.get('idmanager'),
                portlisten=variable_name.get('portlisten'),
                type_field=variable_name.get('type_field'),
                timedelay=variable_name.get('timedelay'),
                keycance=variable_name.get('keycance'),
                keyOk=variable_name.get('keyOk'),
                keydel=variable_name.get('keydel'),
                keyf1=variable_name.get('keyf1'),
                onall=variable_name.get('onall'),
                rangeequs=variable_name.get('rangeequs'),
                listplaces=variable_name.get('listplaces')
            )
            return HttpResponse(dumps({'message': put_success}), content_type=content_type_tmp, charset='utf-8')
        except Exception as error:
            return HttpResponse(dumps({'message': data_base_error_specific+str(error)}),  content_type=content_type_tmp, charset='utf-8')
    '''
    list
    list all information about Equipment
    '''
    EquipmentInformation_patch_request_body = Schema(
        title=' 请求修改设备信息 ',  # 标题
        description=' 修改数据库中的设备信息 ',  # 接口描述
        type=TYPE_OBJECT,  # 类型 "object" ,"string" ,"number" ,"integer" ,"boolean" ,"array" ,"file"
        format=None,  # 格式    date,date-time,password,binary,bytes,float,double,int32,int64,email,ipv4, ipv6, uri, uuid, slug, decimal
        enum=None,  # [列表]列举参数的请求值
        pattern=None,  # 当 format为 string是才填此项
        # 当 type为object时，为dict对象 {'str1': Schema对象, 'str2': SchemaRef对象}
        properties=EquipmentInformation_put_data_schema,
        required=['id'],  # [必须的属性列表]
        items=None,  # 当type是array时，填此项
    )
    EquipmentInformation_patch_responses_success = Response(
        description='修改设备信息成功的响应',
        schema=responses_success,
        examples={
            'message': '修改成功'
        }
    )
    EquipmentInformation_patch_responses_fail = Response(
        description='修改设备信息成功的响应',
        schema=responses_fail,
        examples={
            'message': patch_error
        }
    )

    @swagger_auto_schema(
        request_body=EquipmentInformation_patch_request_body,
        manual_parameters=None,
        operation_id=None,
        operation_description='用于修改设备信息的api接口 ',
        operation_summary=None,
        security=None,
        responses={
            201: EquipmentInformation_patch_responses_success,
            400: EquipmentInformation_patch_responses_fail
        },
        tags=None)
    @get_request_args
    @csrf_exempt
    def patch(self, request,args,session):
        is_login = request.COOKIES.get('is_login')
        if not request.session.get(is_login, None):
            return HttpResponse(dumps({'code': 0}),  content_type=content_type_tmp, charset='utf-8')
        id_equipment= args.get('id')
        data_equipment_initial= list(models.TCyequipment.objects.filter(id= id_equipment).values())
        if data_equipment_initial == []:
            return HttpResponse(dumps({'message': id_error}), content_type=content_type_tmp, charset='utf-8')
        data_equipment=data_equipment_initial[0]
        field_name = ['id', 'name', 'id_location', 'id_location_sn',
                      'id_ip', 'mac', 'state', 'login', 'link', 'class_field', 'dx', 'dy', 'id_user', 'id_plan', 'itimebegin', 'whitelist', 'rem', 'timeupdate', 'idmanager', 'portlisten', 'type_field', 'timedelay', 'keycance', 'keyOk', 'keydel', 'keyf1', 'onall', 'rangeequs', 'listplace']
        variable_name = locals()
        for i in field_name:
            variable_name[i] = args.get(i,data_equipment[i])
        user_id = request.COOKIES.get('user_id')
        user_id = request.session.get(user_id)
        variable_name['idmanager'] = user_id
        try:
            models.TCyequipment.objects.filter(id = id_equipment).update(
                name=variable_name.get('name'),
                id_location=variable_name.get('id_location'),
                id_location_sn=variable_name.get('id_location_sn'),
                id_ip=variable_name.get('id_ip'),
                mac=variable_name.get('mac'),
                state=variable_name.get('state'),
                login=variable_name.get('login'),
                link=variable_name.get('link'),
                class_field=variable_name.get('class_field'),
                dx=variable_name.get('dx'),
                dy=variable_name.get('dy'),
                id_user=variable_name.get('id_user'),
                id_plan=variable_name.get('id_plan'),
                itimebegin=variable_name.get('itimebegin'),
                whitelist=variable_name.get('whitelist'),
                rem=variable_name.get('rem'),
                timeupdate=variable_name.get('timeupdate'),
                idmanager=variable_name.get('idmanager'),
                portlisten=variable_name.get('portlisten'),
                type_field=variable_name.get('type_field'),
                timedelay=variable_name.get('timedelay'),
                keycance=variable_name.get('keycance'),
                keyOk=variable_name.get('keyOk'),
                keydel=variable_name.get('keydel'),
                keyf1=variable_name.get('keyf1'),
                onall=variable_name.get('onall'),
                rangeequs=variable_name.get('rangeequs'),
                listplace=variable_name.get('listplace')
            )
        except Exception as error:
            return HttpResponse(dumps({'message': data_base_error_specific+str(error)}),  content_type=content_type_tmp, charset='utf-8')


class StudentsInformation(APIViewDelete):
    '''
    list
    list all information about Equipment
    '''
    data_schema_present = Schema(
    title ='查询成功的返回',
    description = '查询成功返回的函数值',
    type = TYPE_OBJECT,  # 类型
    properties = data_schema
        )
    get_responses_success = Schema(
        title='成功获取查询数据',
        description='这个接口用于展示成功获取全部数据的格式',
        type=TYPE_OBJECT,
        properties={
                    'page': Schema(
                        title='表示当前的页码数',
                        description=' 表示你现在想要展示的页码数',
                        type=TYPE_INTEGER,
                        format='int32'
                    ),
            'limits': Schema(
                        title='行数',
                        description='表示你想展示在一页上展示的数据行数',
                        type=TYPE_INTEGER,
                        format='int32'
                    ),
            'total_number': Schema(
                        title='页数',
                        description='表示总页数',
                        type=TYPE_INTEGER,
                        format='int32'
                    ),
            'data': Schema(
                        title='数据',
                        description='用于传递查询到的全部数据',
                        type=TYPE_OBJECT,
                        properties = [data_schema_present,data_schema_present]
                    ),
        }
    )
    StudentsInformation_get_responses_success = Response(
        description='学生个人信息查询成功的响应',
        schema=get_responses_success,
        examples=None
    )
    StudentsInformation_get_responses_fail = Response(
        description='学生个人信息查询失败的响应',
        schema=responses_fail,
        examples={'message': patch_error})

    @swagger_auto_schema(
        request_body=None,
        manual_parameters=None,
        operation_id=None,
        operation_description='所有学生信息查询',
        operation_summary=None,
        security=None,
        responses={
            200: StudentsInformation_get_responses_success,
            401: StudentsInformation_get_responses_fail
        },
        tags=None)
    @get_request_args
    @csrf_exempt
    def get(self, request,args,session):
        is_login = request.COOKIES.get('is_login')
        if not request.session.get(is_login, None):
            return HttpResponse(dumps({'code': 0}),  content_type=content_type_tmp, charset='utf-8')
        pages = int(args.get('page', 1))
        limits = int(args.get('limits', 20))
        data_user_information = models.TCyuser.objects.filter( attr = 4).values(
        'id', 'nocard', 'nouser', 'name', 'psw', 'deptid__name', 'sex', 'attr', 'timeupdate', 'userex_related_to_user_information__timeupdate', 'userex_related_to_user_information__idmanager__name', 'userex_related_to_user_information__rem', 'userex_related_to_user_information__photo', 'localid'
        )
        return data_total_response(data_user_information,pages,limits)

    '''
    list
    list all information about Equipment
    '''
    StudentsInformation_post_request_body = Schema(
        title='查询所有学生信息所需要的数据 ',  # 标题
        description=' 这是用查询学生信息数据所需要的基础信息 ',  # 接口描述
        type=TYPE_OBJECT,  # 类型 "object" ,"string" ,"number" ,"integer" ,"boolean" ,"array" ,"file"
        format=None,  # 格式    date,date-time,password,binary,bytes,float,double,int32,int64,email,ipv4, ipv6, uri, uuid, slug, decimal
        enum=None,  # [列表]列举参数的请求值
        pattern=None,  # 当 format为 string是才填此项
        # 当 type为object时，为dict对象 {'str1': Schema对象, 'str2': SchemaRef对象}
        properties=post_search,
        required=['input_string'],  # [必须的属性列表]
        items=None,  # 当type是array时，填此项
    )
    StudentsInformation_post_responses_success = Response(
        description='查询所有个人学生信息成功的响应',
        schema=get_responses_success,
        examples=None,
    )
    StudentsInformation_post_responses_fail = Response(
        description='查询所有学生个人信息失败的响应',
        schema=responses_fail,
        examples={
            'message': post_error
        }
    )

    @swagger_auto_schema(
        request_body=StudentsInformation_post_request_body,
        manual_parameters=None,
        operation_id=None,
        operation_description='这个端口用于查询所有学生的信息',
        operation_summary=None,
        security=None,
        responses={
            201: StudentsInformation_post_responses_success,
            400: StudentsInformation_post_responses_fail
        },
        tags=None)
    @get_request_args
    @csrf_exempt
    def post(self, request,args,session):
        is_login = request.COOKIES.get('is_login')
        if not request.session.get(is_login, None):
            return HttpResponse(dumps({'code': 0}),  content_type=content_type_tmp, charset='utf-8')
        input_string = args.get('input_string', None)
        pages = int(args.get('page', 1))
        limits = int(args.get('limits', 20))
        if input_string == None:
            data_user_information = models.TCyuser.objects.all().values(
                'id', 'nocard', 'nouser', 'name', 'psw', 'deptid__name', 'sex', 'attr', 'timeupdate', 'userex_related_to_user_information__timeupdate', 'userex_related_to_user_information__idmanager__name', 'userex_related_to_user_information__rem', 'userex_related_to_user_information__photo', 'localid')
        else:
            input_string = input_string.strip()
            try:
                test_input = eval(input_string)
            except NameError:
                test_input = input_string
            if isinstance(test_input,int):
                data_user_information = models.TCyuser.objects.filter(
                    Q(id = test_input)|
                    Q(nocard__icontains = str(test_input))|
                    Q(nouser__icontains = str(test_input))|
                    Q(deptid = test_input  )|
                    Q(sex = test_input)|
                    Q( attr = test_input)|
                    Q( timeupdate = test_input )|
                    Q( userex_related_to_user_information__timeupdate = test_input), attr = 4
                ).values(
                'id', 'nocard', 'nouser', 'name', 'psw', 'deptid__name', 'sex', 'attr', 'timeupdate', 'userex_related_to_user_information__timeupdate', 'userex_related_to_user_information__idmanager__name', 'userex_related_to_user_information__rem', 'userex_related_to_user_information__photo', 'localid')
            else:
                data_user_information = models.TCyuser.objects.filter(
                    Q( name__icontains = input_string )|
                    Q( psw__icontains = input_string )|
                    Q( deptid__name = input_string )|
                    Q( userex_related_to_user_information__idmanager__name = input_string )|
                    Q(userex_related_to_user_information__rem=input_string), attr=4
                ).values(
                    'id', 'nocard', 'nouser', 'name', 'psw', 'deptid__name', 'sex', 'attr', 'timeupdate', 'userex_related_to_user_information__timeupdate', 'userex_related_to_user_information__idmanager__name', 'userex_related_to_user_information__rem', 'userex_related_to_user_information__photo', 'localid')

        return data_total_response(data_user_information, pages, limits)



    '''
    list
    list all information about Equipment
    '''
    StudentsInformation_put_data_schema = deepcopy(data_schema)
    StudentsInformation_put_data_schema['deptid'] = Schema(
        title='部门',
        description='用户所属的部门名称',
        type=TYPE_STRING,
        format='string')
    StudentsInformation_put_data_schema['userex_related_to_user_information__idmanager'] =  Schema(
        title='管理员姓名',
        description='修改账户的管理员姓名',
        type=TYPE_STRING,
        format='string')
    del StudentsInformation_put_data_schema['userex_related_to_user_information__idmanager__name']
    del StudentsInformation_put_data_schema['deptid__name']
    StudentsInformation_put_request_body = Schema(
        title=' 增加信息 ',  # 标题
        description=' 所需要的必要数据用于增添数据 ',  # 接口描述
        type=TYPE_OBJECT,  # 类型 "object" ,"string" ,"number" ,"integer" ,"boolean" ,"array" ,"file"
        format=None,  # 格式    date,date-time,password,binary,bytes,float,double,int32,int64,email,ipv4, ipv6, uri, uuid, slug, decimal
        enum=None,  # [列表]列举参数的请求值
        pattern=None,  # 当 format为 string是才填此项
        # 当 type为object时，为dict对象 {'str1': Schema对象, 'str2': SchemaRef对象}
        properties=StudentsInformation_put_data_schema,
        required=['id', 'nocard', 'nouser', 'name', 'psw', 'deptid__name', 'sex', 'attr', 'timeupdate', 'userex_related_to_user_information__timeupdate', 'userex_related_to_user_information__idmanager__name', 'userex_related_to_user_information__rem', 'userex_related_to_user_information__photo', 'localid'],  # [必须的属性列表]
        items=None,  # 当type是array时，填此项
    )
    StudentsInformation_put_responses_success = Response(
        description='增加个人信息成功的响应',
        schema=responses_success,
        examples={
            'message': put_success
        }
    )
    StudentsInformation_put_responses_fail = Response(
        description='增加个人信息失败的响应',
        schema=responses_fail,
        examples={
            'message': put_error
        }
    )

    @swagger_auto_schema(
        request_body=StudentsInformation_put_request_body,
        manual_parameters=None,
        operation_id=None,
        operation_description='用于向数据库增加个人信息',
        operation_summary=None,
        security=None,
        responses={
            201: StudentsInformation_put_responses_success, 400: StudentsInformation_put_responses_fail
        },
        tags=None)
    @get_request_args
    @csrf_exempt
    def put(self, request,args,session):
        is_login = request.COOKIES.get('is_login')
        if not request.session.get(is_login, None):
            return HttpResponse(dumps({'code': 0}),  content_type=content_type_tmp, charset='utf-8')
        field_name = ['id', 'nocard', 'nouser', 'name', 'psw', 'deptid__name', 'sex', 'attr', 'timeupdate', 'userex_related_to_user_information__timeupdate',
                      'userex_related_to_user_information__idmanager__name', 'userex_related_to_user_information__rem', 'userex_related_to_user_information__photo', 'localid']
        variable_name = locals()
        for i in field_name:
            if args[i]==0:
                variable_name[i]=data_equipment[i]
            else:
                variable_name[i] = args.get(i, data_equipment[i])
        user_id = request.COOKIES.get('user_id')
        user_id = request.session.get(user_id)
        variable_name['idmanager'] = user_id
        try:
            use_tmp=models.TCyuser.objects.create(
                id = variable_name.get('id'),
                nocard = variable_name.get('nocard'),
                nouser = variable_name.get('nouser'),
                name = variable_name.get('name'),
                psw = variable_name.get('psw'),
                deptid = variable_name.get('deptid'),
                sex = variable_name.get('sex'),
                attr = variable_name.get('attr'),
                timeupdate=variable_name.get('timeupdate'),
                idmanager = variable_name.get('idmanager'),
                localid = variable_name.get('localid')
            )
            use_tmp_1 = models.TCyuserex.objects.create(
                id = variable_name.get('id'),
                rem = variable_name.get('tcyuserex__rem'),
                timeupdate=variable_name.get('timeupdate'),
                idmanager = variable_name.get('idmanager'),
                photo = variable_name.get('tcyuserex__photo')
            )
            return HttpResponse(dumps({'message': put_success}), content_type=content_type_tmp, charset='utf-8')
        except Exception as error:
            return HttpResponse(dumps({'message': data_base_error_specific+str(error)}),  content_type=content_type_tmp, charset='utf-8')
    '''
    list
    list all information about Equipment
    '''
    StudentsInformation_patch_request_body = Schema(
        title=' 修改个人信息',  # 标题
        description=' 需要被更新的个人信息数据',  # 接口描述
        type=TYPE_OBJECT,  # 类型 "object" ,"string" ,"number" ,"integer" ,"boolean" ,"array" ,"file"
        format=None,  # 格式    date,date-time,password,binary,bytes,float,double,int32,int64,email,ipv4, ipv6, uri, uuid, slug, decimal
        enum=None,  # [列表]列举参数的请求值
        pattern=None,  # 当 format为 string是才填此项
        # 当 type为object时，为dict对象 {'str1': Schema对象, 'str2': SchemaRef对象}
        properties=StudentsInformation_put_data_schema,
        required=['id'],  # [必须的属性列表]
        items=None,  # 当type是array时，填此项
    )
    StudentsInformation_patch_responses_success = Response(
        description=' 修改个人信息成功的响应',
        schema=responses_success,
        examples={
            'message': patch_success
        }
    )
    StudentsInformation_patch_responses_fail = Response(
        description=' 修改个人信息失败的响应',
        schema=responses_fail,
        examples={
            'message': patch_error
        }
    )

    @swagger_auto_schema(
        request_body=StudentsInformation_patch_request_body,
        manual_parameters=None,
        operation_id=None,
        operation_description='用于修改个人信息',
        operation_summary=None,
        security=None,
        responses={
            201: StudentsInformation_patch_responses_success,
            400: StudentsInformation_patch_responses_fail
        },
        tags=None)
    @get_request_args
    @csrf_exempt
    def patch(self, request,args,session):
        is_login = request.COOKIES.get('is_login')
        if not request.session.get(is_login, None):
            return HttpResponse(dumps({'code': 0}),  content_type=content_type_tmp, charset='utf-8')
        id_user_information= args.get('id')
        data_user_information_initial= list(models.TCyuser.objects.filter(id= id_user_information).values(
            'id', 'nocard', 'nouser', 'name', 'psw', 'deptid__name', 'sex', 'attr', 'timeupdate', 'userex_related_to_user_information__timeupdate', 'userex_related_to_user_information__idmanager__name', 'userex_related_to_user_information__rem', 'userex_related_to_user_information__photo', 'localid'
        ))
        if data_user_information_initial == []:
            return HttpResponse(dumps({'message': id_error}),  content_type=content_type_tmp, charset='utf-8')
        data_user_information= data_user_information_initial[0]
        field_name = ['id', 'nocard', 'nouser', 'name', 'psw', 'deptid__name', 'sex', 'attr', 'timeupdate', 'userex_related_to_user_information__timeupdate',
                      'userex_related_to_user_information__idmanager__name', 'userex_related_to_user_information__rem', 'userex_related_to_user_information__photo', 'localid']
        variable_name = locals()
        for i in field_name:
            variable_name[i] = args.get(i, data_user_information[i])
        user_id = request.COOKIES.get('user_id')
        user_id = request.session.get(user_id)
        variable_name['idmanager'] = user_id
        try:
            use_tmp=models.TCyuser.objects.filter(id = id_user_information).update(
                nocard = variable_name.get('nocard'),
                nouser = variable_name.get('nouser'),
                name = variable_name.get('name'),
                psw = variable_name.get('psw'),
                deptid = variable_name.get('deptid'),
                sex = variable_name.get('sex'),
                attr = variable_name.get('attr'),
                timeupdate=variable_name.get('timeupdate'),
                idmanager = variable_name.get('idmanager'),
                localid = variable_name.get('localid')
            )
            use_tmp_1 = models.TCyuserex.objects.filter(id = id_user_information).update(
                rem = variable_name.get('tcyuserex__rem'),
                timeupdate=variable_name.get('timeupdate'),
                idmanager = variable_name.get('idmanager'),
                photo = variable_name.get('tcyuserex__photo')
            )
            return HttpResponse(dumps({'message': put_success}),  content_type=content_type_tmp, charset='utf-8')
        except Exception as error:
            return HttpResponse(dumps({'message': data_base_error_specific+str(error)}),  content_type=content_type_tmp, charset='utf-8')


class TeachersInformation(StudentsInformation):
    '''
    list
    list all information about Equipment
    '''
    TeachersInformation_get_responses_success = Response(
        description='查询所有教师和管理员的个人信息成功的响应',
        schema=get_responses_success,
        examples=None)
    UsertInformation_get_responses_fail = Response(
        description='查询所有教师和管理员的个人信息失败的响应',
        schema=responses_fail,
        examples={'message': patch_error})

    @swagger_auto_schema(
        request_body=None,
        manual_parameters=None,
        operation_id=None,
        operation_description='用于获取所有教师和管理员的个人信息',
        operation_summary=None,
        security=None,
        responses={
            200: TeachersInformation_get_responses_success,
            401: UsertInformation_get_responses_fail
        },
        tags=None)
    @get_request_args
    @csrf_exempt
    def get(self, request,args,session):
        is_login = request.COOKIES.get('is_login')
        if not request.session.get(is_login, None):
            return HttpResponse(dumps({'code': 0}),  content_type=content_type_tmp, charset='utf-8')
        pages = int(args.get('page', 1))
        limits = int(args.get('limits', 20))
        data_user_information = models.TCyuser.objects.filter(attr=4).values(
            'id', 'nocard', 'nouser', 'name', 'psw', 'deptid__name', 'sex', 'attr', 'timeupdate', 'userex_related_to_user_information__timeupdate', 'userex_related_to_user_information__idmanager__name', 'userex_related_to_user_information__rem', 'userex_related_to_user_information__photo', 'localid')
        return data_total_response(data_user_information, pages, limits)

    '''
    list
    list all information about Equipment
    '''
    TeachersInformation_post_request_body = Schema(
        title=' 查询个人数据所需要的查询数据',  # 标题
        description=
        ' 这个端口用于查询所有老师和管理员的个人信息 ',  # 接口描述
        type=
        TYPE_OBJECT,  # 类型 "object" ,"string" ,"number" ,"integer" ,"boolean" ,"array" ,"file"
        format=
        None,  # 格式    date,date-time,password,binary,bytes,float,double,int32,int64,email,ipv4, ipv6, uri, uuid, slug, decimal
        enum=None,  # [列表]列举参数的请求值
        pattern=None,  # 当 format为 string是才填此项
        # 当 type为object时，为dict对象 {'str1': Schema对象, 'str2': SchemaRef对象}
        properties=post_search,
        required=['input_string'],  # [必须的属性列表]
        items=None,  # 当type是array时，填此项
    )
    TeachersInformation_post_responses_success = Response(
        description='查询所有教师和管理员的个人信息成功的响应',
        schema=get_responses_success,
        examples=None,
    )
    TeachersInformation_post_responses_fail = Response(
        description='查询所有教师和管理员的个人信息失败的响应',
        schema=responses_fail,
        examples={'message': post_error})

    @swagger_auto_schema(
        request_body=TeachersInformation_post_request_body,
        manual_parameters=None,
        operation_id=None,
        operation_description='这个端口用于获取所有老师和管理员个人信息',
        operation_summary=None,
        security=None,
        responses={
            201: TeachersInformation_post_responses_success,
            400: TeachersInformation_post_responses_fail
        },
        tags=None)
    @get_request_args
    @csrf_exempt
    def post(self, request,args,session):
        is_login = request.COOKIES.get('is_login')
        if not request.session.get(is_login, None):
            return HttpResponse(dumps({'code': 0}),  content_type=content_type_tmp, charset='utf-8')
        input_string = args.get('input_string', None)
        pages = int(args.get('page', 1))
        limits = int(args.get('limits', 20))
        if input_string == None:
            data_user_information = models.TCyuser.objects.all().values(
                'id', 'nocard', 'nouser', 'name', 'psw', 'deptid__name', 'sex', 'attr', 'timeupdate', 'userex_related_to_user_information__timeupdate', 'userex_related_to_user_information__idmanager__name', 'userex_related_to_user_information__rem', 'userex_related_to_user_information__photo', 'localid')
        else:
            input_string = input_string.strip()
            try:
                test_input = eval(input_string)
            except NameError:
                test_input = input_string
            if isinstance(test_input,int):
                data_user_information = models.TCyuser.objects.filter(
                    Q(id=test_input) | Q(nocard__icontains=str(test_input))
                    | Q(nouser__icontains=str(test_input))
                    | Q(deptid=test_input) | Q(sex=test_input)
                    | Q(attr=test_input) | Q(timeupdate=test_input)
                    | Q(userex_related_to_user_information__timeupdate=test_input),
                    attr=4).values('id', 'nocard', 'nouser', 'name', 'psw', 'deptid__name', 'sex', 'attr', 'timeupdate', 'userex_related_to_user_information__timeupdate', 'userex_related_to_user_information__idmanager__name', 'userex_related_to_user_information__rem', 'userex_related_to_user_information__photo', 'localid')
            else:
                data_user_information = models.TCyuser.objects.filter(
                    Q(name__icontains=input_string)
                    | Q(psw__icontains=input_string)
                    | Q(deptid__name=input_string)
                    | Q(userex_related_to_user_information__idmanager__name=input_string)
                    | Q(userex_related_to_user_information__rem=input_string),
                    attr=4).values('id', 'nocard', 'nouser', 'name', 'psw', 'deptid__name', 'sex', 'attr', 'timeupdate', 'userex_related_to_user_information__timeupdate', 'userex_related_to_user_information__idmanager__name', 'userex_related_to_user_information__rem', 'userex_related_to_user_information__photo', 'localid')
        return data_total_response(data_user_information, pages, limits)


class CourseInformation(APIViewDelete):
    '''
    list
    list all information about Equipment
    '''
    global t
    t= 'name'
    data_schema = {
        'id':
        Schema(
            title='课程id',
            description=id_in_use,
            type=TYPE_INTEGER,
            format='int32',
            enum=None,
        ),
        t:
        Schema(
            title='课程名称',
            description='课程名称',
            type=TYPE_STRING,
            format='string',
            enum=None,
        ),
        'timebegin':
        Schema(
            title='课程开时间 ',
            description=
            ' 项目开始时间记录最后更新时间；（2000-1-1 0:0:0 经过的秒），必须有值  ',
            type=TYPE_INTEGER,
            format='int32',
            enum=None,
            ),
        'timeend':
        Schema(
            title='课程结束时间',
            description=
            '项目结束时间记录最后更新时间；（2000-1-1 0:0:0 经过的秒），必须有值 ',
            type=TYPE_INTEGER,
            format='int32',
            enum=None,
        ),
        'id_location__name':
        Schema(
            title=' 课程所在教室的地点的名称 ',
            description='课程所在教室的地点的名称 ',
            type=TYPE_STRING,
            format='string',
            enum=None,
        ),
        'id_speaker__name':
        Schema(
            title='主讲人',
            description='主讲人也就是课程老师的姓名',
            type=TYPE_STRING,
            format='string',
            enum=None,
        ),
        'attr':
        Schema(
            title='课程属性',
            description=
            '1代表实验类型、2代表普通上课类型、3讲座考勤类型，必须有值',
            type=TYPE_INTEGER,
            format='int32',
            enum=None,
        ),
        'charge':
        Schema(
            title=' 是否收费的字段 ',
            description=
            ' 免费0、收费1、开放2，必须有值 ',
            type=TYPE_INTEGER,
            format='int32',
            enum=None,
        ),
        'pwaccess':
        Schema(
            title='派位',
            description='不派位0、刷卡派位1（派位指用户刷卡时系统指定座位），必须有值',
            type=TYPE_INTEGER,
            format='int32',
            enum=None,
        ),
        'pwcontinuous':
        Schema(
            title='派位连续性',
            description='连续派位0、随机派位1，必须有值',
            type=TYPE_INTEGER,
            format='int32',
            enum=None,
        ),
        'pwdirection':
        Schema(
            title='排位顺序',
            description='顺序派位0、逆序派位1（当设置为随机派位时本功能无效），必须有值',
            type=TYPE_INTEGER,
            format='int32',
            enum=None,
        ),
        'dooropen':
        Schema(
            title='是否开门',
            description=
            '匹配的用户刷卡是否开门，0开门，1不开门',
            type=TYPE_INTEGER,
            format='int32',
            enum=None,
        ),
        'timebegincheckbegin':
        Schema(
            title='最早开始考勤的最早时间',
            description=
            ' 安排考勤开始的最早时间（单位为分钟，0代表无效），必须有值 ',
            type=TYPE_INTEGER,
            format='int32',
            enum=None,
        ),
        'timebegincheckend':
        Schema(
            title='最早签到结束时间 ',
            description=
            ' 安排考勤开始的最迟时间（单位为分钟，0代表无效），必须有值 ',
            type=TYPE_INTEGER,
            format='int32',
            enum=None,
        ),
        'timeendcheckbegin':
        Schema(
            title='考勤结束的最早时间（签退） ',
            description=
            ' 安排考勤结束的最早时间（单位为分钟，0代表无效），必须有值  ',
            type=TYPE_INTEGER,
            format='int32',
            enum=None,
        ),
        'timeendcheckend':
        Schema(
            title='考勤结束的最迟时间（签退）',
            description=
            ' 安排考勤结束的最迟时间（单位为分钟，0代表无效），必须有值',
            type = TYPE_INTEGER,
            format='int32',
            enum=None,
        ),
        'listdepts':
        Schema(
            title=' 参加本安排的学生部门列表 ',
            description=
            ' 参加本安排的学生部门列表 ',
            type=TYPE_STRING,
            format='string',
            enum=None,
        ),
        'rangeusers':
        Schema(
            title='参加本安排的学生学号列表（与RangeUser为相加的关系）',
            description='参加本安排的学生学号列表（与RangeUser为相加的关系）',
            type=TYPE_STRING,
            format='string',
            enum=None,
        ),
        'rangeequs':
        Schema(
            title=' 座位表 ',
            description=' 课程使用的座位范围列表 ',
            type=TYPE_STRING,
            format='string',
            enum=None,
        ),
        'listplaces':
        Schema(
            title=' 课程使用的地点 ',
            description=' 课程使用的地点列表（与课程使用的座位范围列表为相加的关系）' ,
            type=TYPE_STRING,
            format='string',
            enum=None,
        ),
        'mapuser2equ':
        Schema(
            title='学生和座位对应表',
            description='学生和座位对应表',
            type=TYPE_STRING,
            format='string',
            enum=None,
        ),
        'aboutspeaker':
        Schema(
            title='本课程主讲人介绍',
            description=' 本课程主讲人也就是上课老师的介绍',
            type=TYPE_STRING,
            format='string',
            enum=None,
        ),
        'rem':
        Schema(
            title= introduction_course,
            description=introduction_course,
            type=TYPE_STRING,
            format='string',
            enum=None,
        ),
        'timeupdate':
        Schema(
            title='update time ',
            description=' 记录最后更新时间；（2000-1-1 0:0:0 经过的秒），必须有值 ',
            type=TYPE_INTEGER,
            format='int32',
            enum=None,
        ),
        'idmanager__name':
        Schema(
            title=' 更新信息的管理员的姓名 ',
            description=' 更新信息的管理员的姓名 ',
            type=TYPE_STRING,
            format='string',
            enum=None,
        ),
    }
    data_schema_present = Schema(
    title ='查询成功的返回',
    description = '查询成功返回的函数值',
    type = TYPE_OBJECT,  # 类型
    properties = data_schema
        )
    get_responses_success = Schema(
        title='成功获取查询数据',
        description='这个接口用于展示成功获取全部数据的格式',
        type=TYPE_OBJECT,
        properties={
                    'page': Schema(
                        title='表示当前的页码数',
                        description=' 表示你现在想要展示的页码数',
                        type=TYPE_INTEGER,
                        format='int32'
                    ),
            'limits': Schema(
                        title='行数',
                        description='表示你想展示在一页上展示的数据行数',
                        type=TYPE_INTEGER,
                        format='int32'
                    ),
            'total_number': Schema(
                        title='页数',
                        description='表示总页数',
                        type=TYPE_INTEGER,
                        format='int32'
                    ),
            'data': Schema(
                        title='数据',
                        description='用于传递查询到的全部数据',
                        type=TYPE_OBJECT,
                        properties = [data_schema_present,data_schema_present]
                    ),
        }
    )
    CourseInformation_get_responses_success = Response(
        description='查询课程信息成功的响应',
        schema=get_responses_success,
        examples=None,
    )
    CourseInformation_get_responses_fail = Response(
        description='查询课程信息失败的响应',
        schema=responses_fail,
        examples={
            'message': patch_error
        }
    )

    @swagger_auto_schema(
        request_body=None,
        manual_parameters=None,
        operation_id=None,
        operation_description='这个端口用于查询课程信息',
        operation_summary=None,
        security=None,
        responses={
            200: CourseInformation_get_responses_success, 401: CourseInformation_get_responses_fail
        },
        tags=None)
    @get_request_args
    @csrf_exempt
    def get(self, request,args,session):
        is_login = request.COOKIES.get('is_login')
        if not request.session.get(is_login, None):
            return HttpResponse(dumps({'code': 0}),  content_type=content_type_tmp, charset='utf-8')
        pages = int(args.get('page', 1))
        limits = int(args.get('limits', 20))
        data_equipment = models.TCycurricula.objects.all().values(
            'id', t, 'timebegin', 'timeend', 'id_location__name',
            'id_speaker__name', 'attr', 'charge', 'pwaccess',
            'pwcontinuous', 'pwdirection', 'dooropen', 'timebegincheckbegin',
            'timebegincheckend', 'timeendcheckbegin', 'timeendcheckend',
            'rangeusers', 'listdepts', 'rangeequs', 'timeupdate', 'listplaces',
            'idmanager__name', 'mapuser2equ', 'aboutspeaker', 'rem'
            )
        return data_total_response(data_equipment,pages,limits)
    '''
    list
    list all information about Equipment
    '''
    CourseInformation_post_request_body = Schema(
        title='查询课程信息所需要的数据',  # 标题
        description=' 查询课程信息端口所需要的字符串 ',  # 接口描述
        type=TYPE_OBJECT,  # 类型 "object" ,"string" ,"number" ,"integer" ,"boolean" ,"array"" ,"boolean" ,"array" ,"file"
        format=None,  # 格式    date,date-time,password,binary,bytes,float,double,int32,int64,email,ipv4, ipv6, uri, uuid, slug, decimal
        enum=None,  # [列表]列举参数的请求值
        pattern=None,  # 当 format为 string是才填此项
        # 当 type为object时，为dict对象 {'str1': Schema对象, 'str2': SchemaRef对象}
        properties=post_search,
        required=['input_string'],  # [必须的属性列表]
        items=None,  # 当type是array时，填此项
    )
    CourseInformation_post_responses_success = Response(
        description='查询课程信息成功的响应',
        schema=responses_success,
        examples={
            'message': '查询成功'
        }
    )
    CourseInformation_post_responses_fail = Response(
        description='查询课程信息失败的响应',
        schema=responses_fail,
        examples={
            'message': post_error
        }
    )

    @swagger_auto_schema(
        request_body=CourseInformation_post_request_body,
        manual_parameters=None,
        operation_id=None,
        operation_description='通过特定条件查询课程信息',
        operation_summary=None,
        security=None,
        responses={
            201: CourseInformation_post_responses_success,
            400: CourseInformation_post_responses_fail
        },
        tags=None)
    @get_request_args
    @csrf_exempt
    def post(self, request,args,session):
        is_login = request.COOKIES.get('is_login')
        if not request.session.get(is_login, None):
            return HttpResponse(dumps({'code': 0}),  content_type=content_type_tmp, charset='utf-8')
        input_string = args.get('input_string', None)
        pages = int(args.get('page', 1))
        limits = int(args.get('limits', 20))
        if input_string == None:
            data_equipment = models.TCycurricula.objects.all().values(
                'id',
                t,
                'timebegin',
                'timeend',
                'id_location__name',
                'id_speaker__name',
                'attr',
                'login',
                'charge',
                'pwaccess',
                'pwcontinuous',
                'pwdirection',
                'dooropen',
                'timebegincheckbegin',
                'timebegincheckend',
                'timeendcheckbegin',
                'timeendcheckend',
                'rangeusers',
                'listdepts',
                'rangeequs',
                'timeupdate',
                'listplaces',
                'idmanager__name',
                'mapuser2equ',
                'aboutspeaker',
                'rem'
            )
        else:
            input_string = input_string.strip()
            try:
                test_input = eval(input_string)
            except NameError:
                test_input = input_string
            if isinstance(test_input,int):
                data_equipment = models.TCycurricula.objects.filter(
                    Q(id=test_input)
                    |Q(timebegin = test_input)
                    |Q(timeend = test_input)
                    |Q(id_location = test_input)
                    |Q(id_speaker=test_input)
                    |Q(attr = test_input)
                    |Q(charge = test_input)
                    |Q(pwaccess = test_input)
                    |Q(pwcontinuous = test_input)
                    |Q(pwdirection = test_input)
                    |Q(dooropen = test_input)
                    |Q(timebegincheckbegin = test_input)
                    |Q(timebegincheckend = test_input)
                    |Q(timeendcheckbegin = test_input)
                    |Q(timeendcheckend = test_input)
                    |Q(timeupdate = test_input)
                    |Q(idmanager = test_input)).values(
                        'id',
                        'name',
                        'timebegin',
                        'timeend',
                        'id_location__name',
                        'id_speaker__name',
                        'attr',
                        'login',
                        'charge',
                        'pwaccess',
                        'pwcontinuous',
                        'pwdirection',
                        'dooropen',
                        'timebegincheckbegin',
                        'timebegincheckend',
                        'timeendcheckbegin',
                        'timeendcheckend',
                        'rangeusers',
                        'listdepts',
                        'rangeequs',
                        'timeupdate',
                        'listplaces',
                        'idmanager__name',
                        'mapuser2equ',
                        'aboutspeaker',
                        'rem'
                    )
            else:
                data_equipment = models.TCycurricula.objects.filter(
                    Q(name___icontains=input_string)
                    | Q(id_location__name__icontains=input_string)
                    | Q(id_speaker__name__icontains=input_string)
                    | Q(idmanager__name__icontains=input_string)
                    | Q(rem__icontains=input_string)
                    | Q(rangeequs__icontains=input_string)
                    | Q(rangeusers__icontains=input_string)
                    |Q(listdepts__icontains = input_string)
                    |Q(listplaces__icontains = input_string)
                    |Q(mapuser2equ__icontains = input_string)
                    |Q(aboutspeaker__icontains = input_string)
                    |Q(idmanager__name__icontains = input_string)).values(
                        'id',
                        'name',
                        'timebegin',
                        'timeend',
                        'id_location__name',
                        'id_speaker__name',
                        'attr',
                        'login',
                        'charge',
                        'pwaccess',
                        'pwcontinuous',
                        'pwdirection',
                        'dooropen',
                        'timebegincheckbegin',
                        'timebegincheckend',
                        'timeendcheckbegin',
                        'timeendcheckend',
                        'rangeusers',
                        'listdepts',
                        'rangeequs',
                        'timeupdate',
                        'listplaces',
                        'idmanager__name',
                        'mapuser2equ',
                        'aboutspeaker',
                        'rem'
                    )
        return data_total_response(data_equipment,pages,limits)

    '''
    list
    list all information about Equipment
    '''
    d = t
    CourseInformation_put_data_schema = deepcopy(multiple_use)
    CourseInformation_put_data_schema[d] = multiple_use_schema

    CourseInformation_put_request_body = Schema(
        title='  向数据库内添加课程信息  ',  # 标题
        description='向数据库内添加课程信息',  # 接口描述
        type=
        TYPE_OBJECT,  # 类型 "object" ,"string" ,"number" ,"integer" ,"boolean" ,"array" ,"file"
        format=
        None,  # 格式    date,date-time,password,binary,bytes,float,double,int32,int64,email,ipv4, ipv6, uri, uuid, slug, decimal
        enum=None,  # [列表]列举参数的请求值
        pattern=None,  # 当 format为 string是才填此项
        # 当 type为object时，为dict对象 {'str1': Schema对象, 'str2': SchemaRef对象}
        properties=CourseInformation_put_data_schema,
        required=['id',
                'name',
                'timebegin',
                'timeend',
                'id_location',
                'id_speaker',
                'attr',
                'login',
                'charge',
                'pwaccess',
                'pwcontinuous',
                'pwdirection',
                'dooropen',
                'timebegincheckbegin',
                'timebegincheckend',
                'timeendcheckbegin',
                'timeendcheckend',
                'rangeusers',
                'listdepts',
                'rangeequs',
                'timeupdate',
                'listplaces',
                'idmanager',
                'mapuser2equ',
                'aboutspeaker',
                'rem'],  # [必须的属性列表]
        items=None,  # 当type是array时，填此项
    )
    CourseInformation_put_responses_success = Response(
        description='添加课程信息成功的响应',
        schema=responses_success,
        examples={
            'message': put_success
        }
    )
    CourseInformation_put_responses_fail = Response(
        description='添加课程信息失败的响应',
        schema=responses_fail,
        examples={
            'message': put_error
        }
    )

    @swagger_auto_schema(
        request_body=CourseInformation_put_request_body,
        manual_parameters=None,
        operation_id=None,
        operation_description='用于添加课程信息的端口',
        operation_summary=None,
        security=None,
        responses={
            201: CourseInformation_put_responses_success,
            400: CourseInformation_put_responses_fail
        },
        tags=None)
    @get_request_args
    @csrf_exempt
    def put(self, request,args,session):
        is_login = request.COOKIES.get('is_login')
        if not request.session.get(is_login, None):
            return HttpResponse(dumps({'code': 0}),  content_type=content_type_tmp, charset='utf-8')
        field_name = ['id',
                t,
                'timebegin',
                'timeend',
                'id_location',
                'id_speaker',
                'attr',
                'login',
                'charge',
                'pwaccess',
                'pwcontinuous',
                'pwdirection',
                'dooropen',
                'timebegincheckbegin',
                'timebegincheckend',
                'timeendcheckbegin',
                'timeendcheckend',
                'rangeusers',
                'listdepts',
                'rangeequs',
                'timeupdate',
                'listplaces',
                'idmanager',
                'mapuser2equ',
                'aboutspeaker',
                'rem']
        variable_name = locals()
        for i in field_name:
            if args[i]==0:
                variable_name[i]=data_equipment[i]
            else:
                variable_name[i] = args.get(i, data_equipment[i])
        user_id = request.COOKIES.get('user_id')
        user_id = request.session.get(user_id)
        variable_name['idmanager'] = user_id
        # 批量命名变量
        try:
            ueses_tmp = models.TCycurricula.objects.create(
                id=variable_name.get('id'),
                name=variable_name.get(t),
                id_location=variable_name.get('id_location'),
                id_speaker=variable_name.get('id_speaker'),
                timebegin=variable_name.get('timebegin'),
                timeend=variable_name.get('timeend'),
                attr=variable_name.get('attr'),
                login=variable_name.get('login'),
                charge=variable_name.get('charge'),
                pwaccess=variable_name.get('pwaccess'),
                pwcontinuous=variable_name.get('pwcontinuous'),
                pwdirection=variable_name.get('pwdirection'),
                dooropen=variable_name.get('dooropen'),
                timebegincheckbegin=variable_name.get('timebegincheckbegin'),
                timebegincheckend=variable_name.get('timebegincheckend'),
                timeendcheckbegin=variable_name.get('timeendcheckbegin'),
                timeendcheckend=variable_name.get('timeendcheckend'),
                rangeusers=variable_name.get('rangeusers'),
                listdepts=variable_name.get('listdepts'),
                rangeequs=variable_name.get('rangeequs'),
                timeupdate=variable_name.get('timeupdate'),
                listplaces=variable_name.get('listplaces'),
                idmanager=variable_name.get('idmanager'),
                mapuser2equ=variable_name.get('mapuser2equ'),
                aboutspeaker=variable_name.get('aboutspeaker'),
                rem=variable_name.get('rem'))
            return HttpResponse(dumps({'message': put_success}),  content_type=content_type_tmp, charset='utf-8')
        except Exception as error:
            return HttpResponse(dumps({'message': data_base_error_specific+str(error)}),  content_type=content_type_tmp, charset='utf-8')
    '''
    list
    list all information about Equipment
    '''
    CourseInformation_patch_request_body = Schema(
        title=' 修改课程信息 ',  # 标题
        description=' 用于更新和修改课程信息 ',  # 接口描述
        type=TYPE_OBJECT,  # 类型 "object" ,"string" ,"number" ,"integer" ,"boolean" ,"array" ,"file"
        format=None,  # 格式    date,date-time,password,binary,bytes,float,double,int32,int64,email,ipv4, ipv6, uri, uuid, slug, decimal
        enum=None,  # [列表]列举参数的请求值
        pattern=None,  # 当 format为 string是才填此项
        # 当 type为object时，为dict对象 {'str1': Schema对象, 'str2': SchemaRef对象}
        properties=CourseInformation_put_data_schema,
        required=['id'],  # [必须的属性列表]
        items=None,  # 当type是array时，填此项
    )
    CourseInformation_patch_responses_success = Response(
        description='修改课程信息成功的响应',
        schema=responses_success,
        examples={
            'message': patch_success
        }
    )
    CourseInformation_patch_responses_fail = Response(
        description='修改课程信息失败的响应',
        schema=responses_fail,
        examples={
            'message': patch_error
        }
    )

    @swagger_auto_schema(
        request_body=CourseInformation_patch_request_body,
        manual_parameters=None,
        operation_id=None,
        operation_description='The api for change the information about a course',
        operation_summary=None,
        security=None,
        responses={
            201: CourseInformation_patch_responses_success, 400: CourseInformation_patch_responses_fail
        },
        tags=None)
    @get_request_args
    @csrf_exempt
    def patch(self, request,args,session):
        is_login = request.COOKIES.get('is_login')
        if not request.session.get(is_login, None):
            return HttpResponse(dumps({'code': 0}),  content_type=content_type_tmp, charset='utf-8')
        id_equipment = args.get('id')
        data_equipment_initial = list(
            models.TCycurricula.objects.filter(id=id_equipment).values())
        if data_equipment_initial == []:
            return HttpResponse(dumps({'message': id_error}),

                                content_type=content_type_tmp,
                                charset='utf-8')
        data_equipment = data_equipment_initial[0]
        field_name = ['id',
                'name',
                'timebegin',
                'timeend',
                'id_location',
                'id_speaker',
                'attr',
                'login',
                'charge',
                'pwaccess',
                'pwcontinuous',
                'pwdirection',
                'dooropen',
                'timebegincheckbegin',
                'timebegincheckend',
                'timeendcheckbegin',
                'timeendcheckend',
                'rangeusers',
                'listdepts',
                'rangeequs',
                'timeupdate',
                'listplaces',
                'idmanager',
                'mapuser2equ',
                'aboutspeaker',
                'rem']
        variable_name = locals()
        for i in field_name:
            variable_name[i] = args.get(i, data_equipment[i])
        user_id = request.COOKIES.get('user_id')
        user_id = request.session.get(user_id)
        variable_name['idmanager'] = user_id
        try:
            models.TCyequipment.objects.filter(id=id_equipment).update(
                id=variable_name.get('id'),
                name=variable_name.get('name'),
                id_location=variable_name.get('id_location'),
                id_speaker=variable_name.get('id_speaker'),
                timebegin=variable_name.get('timebegin'),
                timeend=variable_name.get('timeend'),
                attr=variable_name.get('attr'),
                login=variable_name.get('login'),
                charge=variable_name.get('charge'),
                pwaccess=variable_name.get('pwaccess'),
                pwcontinuous=variable_name.get('pwcontinuous'),
                pwdirection=variable_name.get('pwdirection'),
                dooropen=variable_name.get('dooropen'),
                timebegincheckbegin=variable_name.get('timebegincheckbegin'),
                timebegincheckend=variable_name.get('timebegincheckend'),
                timeendcheckbegin=variable_name.get('timeendcheckbegin'),
                timeendcheckend=variable_name.get('timeendcheckend'),
                rangeusers=variable_name.get('rangeusers'),
                listdepts=variable_name.get('listdepts'),
                rangeequs=variable_name.get('rangeequs'),
                timeupdate=variable_name.get('timeupdate'),
                listplaces=variable_name.get('listplaces'),
                idmanager=variable_name.get('idmanager'),
                mapuser2equ=variable_name.get('mapuser2equ'),
                aboutspeaker=variable_name.get('aboutspeaker'),
                rem=variable_name.get('rem'))
        except Exception as error:
            return HttpResponse(dumps(
                {'message': data_base_error_specific + str(error)}),

                                content_type=content_type_tmp,
                                charset='utf-8')


class CourseArrangement(CourseInformation):
    '''
    list
    list all information about Equipment
    '''
    global t
    t = 'id_curricula__name'
    '''
    list
    list all information about Equipment
    '''
    CourseArrangement_post_request_body = Schema(
        title='查询课程安排所需要的信息',  # 标题
        description=
        ' 输入查询字符串用于查询课程安排信息 ',  # 接口描述
        type=
        TYPE_OBJECT,  # 类型 "object" ,"string" ,"number" ,"integer" ,"boolean" ,"array"" ,"boolean" ,"array" ,"file"
        format=
        None,  # 格式    date,date-time,password,binary,bytes,float,double,int32,int64,email,ipv4, ipv6, uri, uuid, slug, decimal
        enum=None,  # [列表]列举参数的请求值
        pattern=None,  # 当 format为 string是才填此项
        # 当 type为object时，为dict对象 {'str1': Schema对象, 'str2': SchemaRef对象}
        properties=post_search,
        required=['input_string'],  # [必须的属性列表]
        items=None,  # 当type是array时，填此项
    )
    CourseArrangement_post_responses_success = Response(
        description='查询课程安排表成功的响应',
        schema=responses_success,
        examples={'message': '查询成功'})
    CourseArrangement_post_responses_fail = Response(
        description='查询课程安排表失败的响应',
        schema=responses_fail,
        examples={'message': post_error})

    @swagger_auto_schema(
        request_body=CourseArrangement_post_request_body,
        manual_parameters=None,
        operation_id=None,
        operation_description=
        '这个端口用于查询课程安排表（某些条件下的课程安排表）',
        operation_summary=None,
        security=None,
        responses={
            201: CourseArrangement_post_responses_success,
            400: CourseArrangement_post_responses_fail
        },
        tags=None)
    @get_request_args
    @csrf_exempt
    def post(self, request,args,session):
        is_login=request.COOKIES.get('is_login')
        if not request.session.get(is_login, None):
            return HttpResponse(dumps({'code': 0}),  content_type = content_type_tmp, charset = 'utf-8')
        input_string = args.get('input_string', None)
        pages = int(args.get('page', 1))
        limits = int(args.get('limits', 20))
        if input_string == None:
            data_equipment = models.TCyplan.objects.all().values(
                'id',
                'id_curricula__name',
                'timebegin',
                'timeend',
                'id_location__name',
                'id_speaker__name',
                'attr',
                'login',
                'charge',
                'pwaccess',
                'pwcontinuous',
                'pwdirection',
                'dooropen',
                'timebegincheckbegin',
                'timebegincheckend',
                'timeendcheckbegin',
                'timeendcheckend',
                'rangeusers',
                'listdepts',
                'rangeequs',
                'timeupdate',
                'listplaces',
                'idmanager__name',
                'mapuser2equ',
                'aboutspeaker',
                'rem'
            )
        else:
            input_string = input_string.strip()
            try:
                test_input = eval(input_string)
            except NameError:
                test_input = input_string
            if isinstance(test_input,int):
                data_equipment = models.TCycurricula.objects.filter(
                    Q(id=test_input)
                    | Q(id_curricula=test_input)
                    | Q(timebegin=test_input)
                    | Q(timeend=test_input)
                    | Q(id_location=test_input)
                    | Q(id_speaker=test_input)
                    | Q(attr=test_input)
                    | Q(charge=test_input)
                    | Q(pwaccess=test_input)
                    | Q(pwcontinuous=test_input)
                    | Q(pwdirection=test_input)
                    | Q(dooropen=test_input)
                    | Q(timebegincheckbegin=test_input)
                    | Q(timebegincheckend=test_input)
                    | Q(timeendcheckbegin=test_input)
                    | Q(timeendcheckend=test_input)
                    | Q(timeupdate=test_input)
                    | Q(idmanager=test_input)).values(
                        'id',
                        t,
                        'timebegin',
                        'timeend',
                        'id_location__name',
                        'id_speaker__name',
                        'attr',
                        'login',
                        'charge',
                        'pwaccess',
                        'pwcontinuous',
                        'pwdirection',
                        'dooropen',
                        'timebegincheckbegin',
                        'timebegincheckend',
                        'timeendcheckbegin',
                        'timeendcheckend',
                        'rangeusers',
                        'listdepts',
                        'rangeequs',
                        'timeupdate',
                        'listplaces',
                        'idmanager__name',
                        'mapuser2equ',
                        'aboutspeaker',
                        'rem'
                    )
            else:
                data_equipment = models.TCycurricula.objects.filter(
                    Q(name___icontains=input_string)
                    |Q(id_curricula__name__icontains = input_string)
                    | Q(id_location__name__icontains=input_string)
                    | Q(id_speaker__name__icontains=input_string)
                    | Q(idmanager__name__icontains=input_string)
                    | Q(rem__icontains=input_string)
                    | Q(rangeequs__icontains=input_string)
                    | Q(rangeusers__icontains=input_string)
                    | Q(listdepts__icontains=input_string)
                    | Q(listplaces__icontains=input_string)
                    | Q(mapuser2equ__icontains=input_string)
                    | Q(aboutspeaker__icontains=input_string)
                    | Q(idmanager__name__icontains=input_string)).values(
                        'id',
                        t,
                        'timebegin',
                        'timeend',
                        'id_location__name',
                        'id_speaker__name',
                        'attr',
                        'login',
                        'charge',
                        'pwaccess',
                        'pwcontinuous',
                        'pwdirection',
                        'dooropen',
                        'timebegincheckbegin',
                        'timebegincheckend',
                        'timeendcheckbegin',
                        'timeendcheckend',
                        'rangeusers',
                        'listdepts',
                        'rangeequs',
                        'timeupdate',
                        'listplaces',
                        'idmanager__name',
                        'mapuser2equ',
                        'aboutspeaker',
                        'rem',
                    )
        return data_total_response(data_equipment,pages,limits)

    '''
    list
    list all information about Equipment
    '''
    d = 'id_curricula'
    CourseArrangement_put_data_schema = deepcopy(multiple_use)
    CourseArrangement_put_data_schema[d] = multiple_use_schema
    CourseArrangement_put_request_body = Schema(
        title='  增加课程安排表需要的数据  ',  # 标题
        description='向数据库增加课程安排表需要的数据和字段',  # 接口描述
        type=
        TYPE_OBJECT,  # 类型 "object" ,"string" ,"number" ,"integer" ,"boolean" ,"array" ,"file"
        format=
        None,  # 格式    date,date-time,password,binary,bytes,float,double,int32,int64,email,ipv4, ipv6, uri, uuid, slug, decimal
        enum=None,  # [列表]列举参数的请求值
        pattern=None,  # 当 format为 string是才填此项
        # 当 type为object时，为dict对象 {'str1': Schema对象, 'str2': SchemaRef对象}
        properties=CourseArrangement_put_data_schema,
        required=[
            'id', 'name', 'timebegin', 'timeend', 'id_location', 'id_speaker',
            'attr', 'login', 'charge', 'pwaccess', 'pwcontinuous',
            'pwdirection', 'dooropen', 'timebegincheckbegin',
            'timebegincheckend', 'timeendcheckbegin', 'timeendcheckend',
            'rangeusers', 'listdepts', 'rangeequs', 'timeupdate', 'listplaces',
            'idmanager', 'mapuser2equ', 'aboutspeaker', 'rem'
        ],  # [必须的属性列表]
        items=None,  # 当type是array时，填此项
    )
    CourseArrangement_put_responses_success = Response(
        description='增加课程安排表数据成功的响应',
        schema=responses_success,
        examples={'message': put_success})
    CourseArrangement_put_responses_fail = Response(
        description='增加课程安排表数据失败的响应',
        schema=responses_fail,
        examples={'message': put_error})

    @swagger_auto_schema(
        request_body=CourseArrangement_put_request_body,
        manual_parameters=None,
        operation_id=None,
        operation_description='这个端口用于向数据库增加课程安排表的数据',
        operation_summary=None,
        security=None,
        responses={
            201: CourseArrangement_put_responses_success,
            400: CourseArrangement_put_responses_fail
        },
        tags=None)
    @get_request_args
    @csrf_exempt
    def put(self, request,args,session):
        is_login = request.COOKIES.get('is_login')
        if not request.session.get(is_login, None):
            return HttpResponse(dumps({'code': 0}),  content_type=content_type_tmp, charset='utf-8')
        field_name = [
            'id', 'id_curricula', 'timebegin', 'timeend', 'id_location', 'id_speaker',
            'attr', 'login', 'charge', 'pwaccess', 'pwcontinuous',
            'pwdirection', 'dooropen', 'timebegincheckbegin', 'timebegincheckend',
            'timeendcheckbegin', 'timeendcheckend', 'rangeusers', 'listdepts',
            'rangeequs', 'timeupdate', 'listplaces', 'idmanager',
            'mapuser2equ', 'aboutspeaker', 'rem'
        ]
        is_login = request.COOKIES.get('is_login')
        if not request.session.get(is_login, None):
            return HttpResponse(dumps({'code': 0}),  content_type=content_type_tmp, charset='utf-8')
        variable_name = locals()
        for i in field_name:
            if args[i]==0:
                variable_name[i]=data_equipment[i]
            else:
                variable_name[i] = args.get(i, data_equipment[i])
        user_id = request.COOKIES.get('user_id')
        user_id = request.session.get(user_id)
        variable_name['idmanager'] = user_id
        # 批量命名变量
        try:
            ueses_tmp = models.TCycurricula.objects.create(
                id=variable_name.get('id'),
                id_curricula=variable_name.get('id_curricula'),
                id_location=variable_name.get('id_location'),
                id_speaker=variable_name.get('id_speaker'),
                timebegin=variable_name.get('timebegin'),
                timeend=variable_name.get('timeend'),
                attr=variable_name.get('attr'),
                login=variable_name.get('login'),
                charge=variable_name.get('charge'),
                pwaccess=variable_name.get('pwaccess'),
                pwcontinuous=variable_name.get('pwcontinuous'),
                pwdirection=variable_name.get('pwdirection'),
                dooropen=variable_name.get('dooropen'),
                timebegincheckbegin=variable_name.get('timebegincheckbegin'),
                timebegincheckend=variable_name.get('timebegincheckend'),
                timeendcheckbegin=variable_name.get('timeendcheckbegin'),
                timeendcheckend=variable_name.get('timeendcheckend'),
                rangeusers=variable_name.get('rangeusers'),
                listdepts=variable_name.get('listdepts'),
                rangeequs=variable_name.get('rangeequs'),
                timeupdate=variable_name.get('timeupdate'),
                listplaces=variable_name.get('listplaces'),
                idmanager=variable_name.get('idmanager'),
                mapuser2equ=variable_name.get('mapuser2equ'),
                aboutspeaker=variable_name.get('aboutspeaker'),
                rem=variable_name.get('rem'))
            return HttpResponse(dumps({'message': put_success}),

                                content_type=content_type_tmp,
                                charset='utf-8')
        except Exception as error:
            return HttpResponse(dumps(
                {'message': data_base_error_specific + str(error)}),

                                content_type=content_type_tmp,
                                charset='utf-8')

    '''
    list
    list all information about Equipment
    '''
    CourseArrangement_patch_request_body = Schema(
        title=' 修改课程安排表所需要的数据 ',  # 标题
        description=' 修改课程安排表 ',  # 接口描述
        type=
        TYPE_OBJECT,  # 类型 "object" ,"string" ,"number" ,"integer" ,"boolean" ,"array" ,"file"
        format=
        None,  # 格式    date,date-time,password,binary,bytes,float,double,int32,int64,email,ipv4, ipv6, uri, uuid, slug, decimal
        enum=None,  # [列表]列举参数的请求值
        pattern=None,  # 当 format为 string是才填此项
        # 当 type为object时，为dict对象 {'str1': Schema对象, 'str2': SchemaRef对象}
        properties=CourseArrangement_put_data_schema,
        required=['id'],  # [必须的属性列表]
        items=None,  # 当type是array时，填此项
    )
    CourseArrangement_patch_responses_success = Response(
        description='修改课程安排表成功的响应',
        schema=responses_success,
        examples={'message': patch_success})
    CourseArrangement_patch_responses_fail = Response(
        description='修改课程安排表失败的响应',
        schema=responses_fail,
        examples={'message': patch_error})

    @swagger_auto_schema(request_body=CourseArrangement_patch_request_body,
                         manual_parameters=None,
                         operation_id=None,
                         operation_description=
                         '这个端口用于修改课程安排表的数据',
                         operation_summary=None,
                         security=None,
                         responses={
                             201: CourseArrangement_patch_responses_success,
                             400: CourseArrangement_patch_responses_fail
                         },
                         tags=None)
    @get_request_args
    @csrf_exempt
    def patch(self, request,args,session):
        is_login = request.COOKIES.get('is_login')
        if not request.session.get(is_login, None):
            return HttpResponse(dumps({'code': 0}),  content_type=content_type_tmp, charset='utf-8')
        id_equipment = args.get('id')
        data_equipment_initial = list(
            models.TCycurricula.objects.filter(id=id_equipment).values())
        if data_equipment_initial == []:
            return HttpResponse(dumps({'message': id_error}),

                                content_type=content_type_tmp,
                                charset='utf-8')
        data_equipment = data_equipment_initial[0]
        field_name = [
            'id',
            'id_curricula',
            'timebegin',
            'timeend',
            'id_location',
            'id_speaker',
            'attr',
            'login',
            'charge',
            'pwaccess',
            'pwcontinuous',
            'pwdirection',
            'dooropen',
            'timebegincheckbegin',
            'timebegincheckend',
            'timeendcheckbegin',
            'timeendcheckend',
            'rangeusers',
            'listdepts',
            'rangeequs',
            'timeupdate',
            'listplaces',
            'idmanager',
            'mapuser2equ',
            'aboutspeaker',
            'rem'
        ]
        variable_name = locals()
        for i in field_name:
            variable_name[i] = args.get(i, data_equipment[i])
        user_id = request.COOKIES.get('user_id')
        user_id = request.session.get(user_id)
        variable_name['idmanager'] = user_id
        try:
            models.TCyequipment.objects.filter(id=id_equipment).update(
                id=variable_name.get('id'),
                id_curricula=variable_name.get('id_curricula'),
                id_location=variable_name.get('id_location'),
                id_speaker=variable_name.get('id_speaker'),
                timebegin=variable_name.get('timebegin'),
                timeend=variable_name.get('timeend'),
                attr=variable_name.get('attr'),
                login=variable_name.get('login'),
                charge=variable_name.get('charge'),
                pwaccess=variable_name.get('pwaccess'),
                pwcontinuous=variable_name.get('pwcontinuous'),
                pwdirection=variable_name.get('pwdirection'),
                dooropen=variable_name.get('dooropen'),
                timebegincheckbegin=variable_name.get('timebegincheckbegin'),
                timebegincheckend=variable_name.get('timebegincheckend'),
                timeendcheckbegin=variable_name.get('timeendcheckbegin'),
                timeendcheckend=variable_name.get('timeendcheckend'),
                rangeusers=variable_name.get('rangeusers'),
                listdepts=variable_name.get('listdepts'),
                rangeequs=variable_name.get('rangeequs'),
                timeupdate=variable_name.get('timeupdate'),
                listplaces=variable_name.get('listplaces'),
                idmanager=variable_name.get('idmanager'),
                mapuser2equ=variable_name.get('mapuser2equ'),
                aboutspeaker=variable_name.get('aboutspeaker'),
                rem=variable_name.get('rem'))
        except Exception as error:
            return HttpResponse(dumps(
                {'message': data_base_error_specific + str(error)}),

                                content_type=content_type_tmp,
                                charset='utf-8')


class AttendanceInformation(APIViewDelete):
    '''
    list
    list all information about Equipment
    '''

    data_schema = {
        'id':
        Schema(
            title='考勤记录的关键字',
            description=' 关键字，每个记录的唯一标识，一旦添加不能能更改，顺序增加',
            type=TYPE_INTEGER,
            format='int32',
            enum=None,
        ),
        'id_user__name':
        Schema(
            title=name_user,
            description='考勤记录者的姓名',
            type=TYPE_STRING,
            format='string',
            enum=None,
        ),
        'attendtimes':
        Schema(
            title='考勤记录者出勤的次数',
            description='考勤者打卡签到的次数',
            type=TYPE_INTEGER,
            format='int32',
            enum=None,
        ),
        'attendtotal':
        Schema(
            title='应该出勤的次数',
            description=' 应该出勤的次数 ',
            type=TYPE_INTEGER,
            format='int32',
            enum=None,
        ),
        'attendrates':
        Schema(
            title='出勤率',
            description=' 这门课或者学生的出勤率 ',
            type=TYPE_INTEGER,
            format='int32',
            enum=None,
        ),
        'person_data':
        Schema(
            title='签到者的个人数据',
            description='签到人员的个人数据，这门课每次签到的具体数据',
            type=TYPE_OBJECT,
            properties=[data_schema_personal,data_schema_personal],
        ),
    }
    data_schema_present = Schema(
    title ='查询成功的返回',
    description = '查询成功返回的函数值',
    type = TYPE_OBJECT,  # 类型
    properties = data_schema
    )
    get_responses_success = Schema(
        title='成功获取查询数据',
        description='这个接口用于展示成功获取全部数据的格式',
        type=TYPE_OBJECT,
        properties={
            'data': Schema(
                        title='数据',
                        description='用于传递查询到的全部数据',
                        type=TYPE_OBJECT,
                        properties = [data_schema_present,data_schema_present]
                    ),
        }
    )
    AttendanceInformation_get_parammeter = Parameter(
        name='course_plan_id',
        in_=IN_QUERY,
        description = '传递给后端的需要查询的课程的id（是课程id而不是课程安排表的id）',
        required = True,
        type =TYPE_INTEGER,
        format = 'int32',
        )
    AttendanceInformation_get_responses_success = Response(
        description='获取签到记录成功的响应',
        schema=get_responses_success,
        examples={
            'message': '获取成功'
        }
    )
    AttendanceInformation_get_responses_fail = Response(
        description='获取签到记录失败的响应',
        schema=responses_fail,
        examples={
            'message': '获取失败，请重新尝试'
        }
    )

    @swagger_auto_schema(
        request_body=None,
        manual_parameters=[AttendanceInformation_get_parammeter],
        operation_id=None,
        operation_description='获取学生签到记录',
        operation_summary=None,
        security=None,
        responses={
            200: AttendanceInformation_get_responses_success,
            401: AttendanceInformation_get_responses_fail
        },
        tags=None)
    @get_request_args
    @csrf_exempt
    def get(self, request,args,session):
        is_login = request.COOKIES.get('is_login')
        if not request.session.get(is_login, None):
            return HttpResponse(dumps({'code': 0}),  content_type=content_type_tmp, charset='utf-8')
        user_id = request.COOKIES.get('user_id')
        user_id = request.session.get(user_id)
        pages = int(args.get('page', 1))
        limits = int(args.get('limits', 20))
        course_plan_id = args.get('course_plan_id')
        id_list=[]
        format_type=1
        data_equipment = data_attendance(course_plan_id,id_list,format_type,user_id)
        return data_total_response(data_equipment,pages,limits)
    '''
    list
    list all information about Equipment
    '''
    post_search['course_plan_id'] =   Schema(
            title='需要查询的课程id',
            description='需要查询的课程id，需要前端传递给后端',
            type=TYPE_INTEGER,
            format='int32',
            enum=None,
        )
    AttendanceInformation_post_request_body = Schema(
        title=' 查询学生签到情况 ',  # 标题
        description='这个接口用于检测学生签到情况',  # 接口描述
        type=TYPE_OBJECT,  # 类型 "object" ,"string" ,"number" ,"integer" ,"boolean" ,"array" ,"file"
        format=None,  # 格式    date,date-time,password,binary,bytes,float,double,int32,int64,email,ipv4, ipv6, uri, uuid, slug, decimal
        enum=None,  # [列表]列举参数的请求值
        pattern=None,  # 当 format为 string是才填此项
        # 当 type为object时，为dict对象 {'str1': Schema对象, 'str2': SchemaRef对象}
        properties=post_search,
        required=['input_string'],  # [必须的属性列表]
        items=None,  # 当type是array时，填此项
    )
    AttendanceInformation_post_responses_success = Response(
        description='查询学生签到记录成功的响应',
        schema=responses_success,
        examples={
            'message': post_success
        }
    )
    AttendanceInformation_post_responses_fail = Response(
        description='查询学生签到记录失败的响应',
        schema=responses_fail,
        examples={
            'message': post_error
        }
    )

    @swagger_auto_schema(
        request_body=AttendanceInformation_post_request_body,
        manual_parameters=None,
        operation_id=None,
        operation_description='这个接口用于查询学生签到情况',
        operation_summary=None,
        security=None,
        responses={
            201: AttendanceInformation_post_responses_success, 400: AttendanceInformation_post_responses_fail
        },
        tags=None)
    @get_request_args
    @csrf_exempt
    def post(self, request,args,session):
        is_login = request.COOKIES.get('is_login')
        if not request.session.get(is_login, None):
            return HttpResponse(dumps({'code': 0}),  content_type=content_type_tmp, charset='utf-8')
        user_id = request.COOKIES.get('user_id')
        user_id = request.session.get(user_id)
        input_string = args.get('input_string', None)
        pages = int(args.get('page', 1))
        limits = int(args.get('limits', 20))
        course_plan_id = args.get('course_plan_id')
        id_list=[]
        format_type =1
        if input_string == None:
            data_equipment = data_attendance(course_plan_id,id_list,format_type,user_id)
        else:
            input_string = input_string.strip()
            try:
                test_input = eval(input_string)
            except NameError:
                test_input = input_string
            if isinstance(test_input,int):
                data_equipment = list(models.TCyequipment.objects.filter(
                    Q(id=test_input) |
                    Q(id_user=test_input) |
                    Q( status = test_input )|
                    Q( idmanager = test_input )|
                    Q( time = test_input )|
                    Q(timeupdate=str(test_input)), id_plan = course_plan_id
                ).values('id'))
            else:
                data_equipment = list(models.TCyequipment.objects.filter(
                    Q(id_user__name__icontains=input_string)
                    | Q(idmanager__name__icontains=input_string),
                    id_plan=course_plan_id).values(
                        'id'))
            data_equipment = data_attendance(course_plan_id, data_equipment, format_type, user_id)
        return data_total_response(data_equipment,pages,limits)
    '''
    list
    list all information about Equipment
    '''
    AttendanceInformation_put_schema = deepcopy(data_schema)
    AttendanceInformation_put_schema['idmanager'] = data_schema_personal_data['idmanager__name']
    AttendanceInformation_put_schema['timeupdate'] = data_schema_personal_data['timeupdate']
    AttendanceInformation_put_schema['id_user'] = data_schema['id_user__name']
    del AttendanceInformation_put_schema['id_user__name']
    del AttendanceInformation_put_schema['attendtimes']
    del AttendanceInformation_put_schema['attendtotal']
    del AttendanceInformation_put_schema['person_data']
    AttendanceInformation_put_schema['Param2'] = Schema(
            title='课程安排表id',
            description='学生正在上课的课程安排表id，是课程安排表tcyplan的id',
            type=TYPE_STRING,
            format='string',
            enum=None,
        )
    AttendanceInformation_put_schema['Time'] = Schema(
            title='签到时间',
            description='记录最后更新时间；（2000-1-1 0:0:0 经过的秒），必须有值，如果是更改签到时间，签到时间按照上课时间来定',
            type=TYPE_STRING,
            format='string',
            enum=None,
        )
    AttendanceInformation_put_schema['Type_field'] = Schema(
            title = '记录类型',
            description = '记录的具体类型，具体使用参照T_CyTypeRA',
            type = TYPE_INTEGER,
            format='int32',
            )
    AttendanceInformation_put_schema['Param1'] = Schema(
            title='特殊字段',
            description='特殊字段，使用不明',
            type=TYPE_STRING,
            format='string',
            enum=None,
        )
    AttendanceInformation_put_schema['money'] = Schema(
            title='发生的费用',
            description='发生的费用',
            type=TYPE_STRING,
            format='string',
            enum=None,
        )
    AttendanceInformation_put_request_body = Schema(
        title='增加签到记录',  # 标题
        description='用于增加学生签到记录',  # 接口描述
        type=
        TYPE_OBJECT,  # 类型 "object" ,"string" ,"number" ,"integer" ,"boolean" ,"array" ,"file"
        format=
        None,  # 格式    date,date-time,password,binary,bytes,float,double,int32,int64,email,ipv4, ipv6, uri, uuid, slug, decimal
        enum=None,  # [列表]列举参数的请求值
        pattern=None,  # 当 format为 string是才填此项
        # 当 type为object时，为dict对象 {'str1': Schema对象, 'str2': SchemaRef对象}
        properties=AttendanceInformation_put_schema,
        required=[
            'id', 'id_user', 'param2', 'idmanager', 'timeupdate', 'time'
        ],  # [必须的属性列表]
        items=None,  # 当type是array时，填此项
    )
    AttendanceInformation_put_responses_success = Response(
        description='添加学生签到记录成功的响应',
        schema=responses_success,
        examples={
            'message': patch_success
        }
    )
    AttendanceInformation_put_responses_fail = Response(
        description='添加学生签到记录失败的响应',
        schema=responses_fail,
        examples={
            'message': patch_error
        }
    )

    @swagger_auto_schema(
        request_body=AttendanceInformation_put_request_body,
        manual_parameters=None,
        operation_id=None,
        operation_description='增加学生的签到记录',
        operation_summary=None,
        security=None,
        responses={
            201: AttendanceInformation_put_responses_success,
            400: AttendanceInformation_put_responses_fail
        },
        tags=None)
    @get_request_args
    @csrf_exempt
    def put(self, request,args,session):
        is_login = request.COOKIES.get('is_login')
        if not request.session.get(is_login, None):
            return HttpResponse(dumps({'code': 0}),  content_type=content_type_tmp, charset='utf-8')
        field_name = ['id','id_user','param2','idmanager','timeupdate','param1','time','money','type_field']
        variable_name = locals()
        for i in field_name:
            variable_name[i] = args.get(i,0)
        user_id = request.COOKIES.get('user_id')
        user_id = request.session.get(user_id)
        variable_name['idmanager'] = user_id
        # 批量命名变量
        try:
            ueses_tmp=models.TCyRunningaccount.objects.create(
                id=variable_name.get('id'),
                id_user=variable_name.get('id_user'),
                time=variable_name.get('time'),
                type_field=variable_name.get('type_field'),
                money = variable_name.get('money'),
                param1=variable_name.get('param1'),
                param2=variable_name.get('param2'),
                timeupdate=variable_name.get('timeupdate'),
                idmanager=variable_name.get('idmanager')
            )
            return HttpResponse(dumps({'message': put_success}), content_type=content_type_tmp, charset='utf-8')
        except Exception as error:
            return HttpResponse(dumps({'message': data_base_error_specific+str(error)}),  content_type=content_type_tmp, charset='utf-8')
    '''
    list
    list all information about Equipment
    '''
    AttendanceInformation_patch_request_body = Schema(
        title='修改学生签到记录',  # 标题
        description='用于修改学生签到记录',  # 接口描述
        type=TYPE_OBJECT,  # 类型 "object" ,"string" ,"number" ,"integer" ,"boolean" ,"array" ,"file"
        format=None,  # 格式    date,date-time,password,binary,bytes,float,double,int32,int64,email,ipv4, ipv6, uri, uuid, slug, decimal
        enum=None,  # [列表]列举参数的请求值
        pattern=None,  # 当 format为 string是才填此项
        # 当 type为object时，为dict对象 {'str1': Schema对象, 'str2': SchemaRef对象}
        properties=AttendanceInformation_put_schema,
        required=None,  # [必须的属性列表]
        items=None,  # 当type是array时，填此项
    )
    AttendanceInformation_patch_responses_success = Response(
        description='修改学生签到记录成功的响应',
        schema=responses_success,
        examples={
            'message': patch_success
        }
    )
    AttendanceInformation_patch_responses_fail = Response(
        description='修改学生签到记录失败的响应',
        schema=responses_fail,
        examples={
            'message': patch_error
        }
    )

    @swagger_auto_schema(
        request_body=AttendanceInformation_patch_request_body,
        manual_parameters=None,
        operation_id=None,
        operation_description='用于修改学生签到记录',
        operation_summary=None,
        security=None,
        responses={
            201: AttendanceInformation_patch_responses_success, 400: AttendanceInformation_patch_responses_fail
        },
        tags=None)
    @get_request_args
    @csrf_exempt
    def patch(self, request,args,session):
        is_login = request.COOKIES.get('is_login')
        if not request.session.get(is_login, None):
            return HttpResponse(dumps({'code': 0}),  content_type=content_type_tmp, charset='utf-8')
        id_equipment= args.get('id')
        data_equipment_initial = list(
            models.TCyRunningaccount.objects.filter(id=id_equipment).values())
        if data_equipment_initial == []:
            return HttpResponse(dumps({'message': id_error}), content_type=content_type_tmp, charset='utf-8')
        data_equipment=data_equipment_initial[0]
        field_name = ['id','id_user','param2','idmanager','timeupdate','param1','time','money','type_field']
        variable_name = locals()
        for i in field_name:
            variable_name[i] = args.get(i,data_equipment[i])
        user_id = request.COOKIES.get('user_id')
        user_id = request.session.get(user_id)
        variable_name['idmanager'] = user_id
        try:
            models.TCyRunningaccount.objects.filter(id=id_equipment).update(
                id=variable_name.get('id'),
                id_user=variable_name.get('id_user'),
                time=variable_name.get('time'),
                type_field=variable_name.get('type_field'),
                money=variable_name.get('money'),
                param1=variable_name.get('param1'),
                param2=variable_name.get('param2'),
                timeupdate=variable_name.get('timeupdate'),
                idmanager=variable_name.get('idmanager'))
        except Exception as error:
            return HttpResponse(dumps({'message': data_base_error_specific+str(error)}),  content_type=content_type_tmp, charset='utf-8')


class AttendanceInformationClass(AttendanceInformation):
    '''
    list
    list all information about Equipment
    '''
    data_schema_personal = {
        'id':
        Schema(
            title='关键字段',
            description='关键字，每个记录的唯一标识，一旦添加不能能更改，顺序增加；',
            type=TYPE_INTEGER,
            format='int32',
            enum=None,
        ),
        'id_user__name':
        Schema(
            title=name_user,
            description='考勤的用户姓名',
            type=TYPE_STRING,
            format='string',
            enum=None,
        ),
        'time': Schema(
            title='签到时间',
            description='记录最后更新时间；（2000-1-1 0:0:0 经过的秒），必须有值，如果是更改签到时间，签到时间按照上课时间来定',
            type=TYPE_STRING,
            format='string',
            enum=None,
        ),
        'status':
        Schema(
            title='考勤情况',
            description=
            ' 0代表未在课程中签到，1 代表 已在课程中签到，2 代表已经在课程中签退3 代表在课程中迟到，4 代表旷课',
            type=TYPE_INTEGER,
            format='int32',
            enum=None,
        ),
        'timeupdate':
        Schema(
            title='记录更新时间',
            description=' 记录最后更新时间；（2000-1-1 0:0:0 经过的秒），必须有值',
            type=TYPE_INTEGER,
            format='int32',
            enum=None,
        ),
        'idmanager__name':
        Schema(
            title='修改字段的操作员姓名',
            description=' 修改字段数据的操作员姓名',
            type=TYPE_INTEGER,
            format='int32',
            enum=None,
        ),
    }
    data_schema = {
        'param2':
        Schema(
            title='签到课程',
            description='签到的课程安排表id ',
            type=TYPE_INTEGER,
            format='int32',
            enum=None,
        ),
        'param2__id_curricula__name':
        Schema(
            title='签到课程名称',
            description='签到课程名称',
            type=TYPE_INTEGER,
            format='int32',
            enum=None,
        ),
        'param2__timebegin':
        Schema(
            title='签到课程开始时间',
            description='签到课程开始时间',
            type=TYPE_INTEGER,
            format='int32',
            enum=None,
        ),
        'param2__timeend':
        Schema(
            title='签到课程结束时间',
            description='签到课程结束时间',
            type=TYPE_INTEGER,
            format='int32',
            enum=None,
        ),
        'attendnumbers':
        Schema(
            title='出勤',
            description='学生的出勤次数',
            type=TYPE_INTEGER,
            format='int32',
            enum=None,
        ),
        'totalnumbers':
        Schema(
            title='考勤总数',
            description=' 实际考勤指标 ',
            type=TYPE_INTEGER,
            format='int32',
            enum=None,
        ),
        'attendrates':
        Schema(
            title='出勤率',
            description='出勤率',
            type=TYPE_INTEGER,
            format='int32',
            enum=None,
        ),
        'person_data':
        Schema(
            title='个人用户数据',
            description=' 每个用户会拥有的数据 ',
            type=TYPE_OBJECT,
            properties=[data_schema_personal, data_schema_personal],
        ),
    }
    AttendanceInformationClass_get_responses_success = Response(
        description='获取考勤数据成功的响应',
        schema=get_responses_success,
        examples={'message': '获取成功'})
    AttendanceInformationClass_get_responses_fail = Response(
        description='获取考勤数据失败的响应',
        schema=responses_fail,
        examples={'message': '获取失败，请重新尝试'})

    @swagger_auto_schema(request_body=None,
                         manual_parameters=None,
                         operation_id=None,
                         operation_description='以具体上课次数来展示课程签到情况',
                         operation_summary=None,
                         security=None,
                         responses={
                             200:
                             AttendanceInformationClass_get_responses_success,
                             401: AttendanceInformationClass_get_responses_fail
                         },
                         tags=None)
    @get_request_args
    @csrf_exempt
    def get(self, request,args,session):
        is_login = request.COOKIES.get('is_login')
        if not request.session.get(is_login, None):
            return HttpResponse(dumps({'code': 0}),  content_type=content_type_tmp, charset='utf-8')
        user_id = request.COOKIES.get('user_id')
        user_id = request.session.get(user_id)
        pages = int(args.get('page', 1))
        limits = int(args.get('limits', 20))
        course_plan_id = args.get('course_plan_id')
        id_list = []
        format_type =2
        data_equipment = data_attendance(course_plan_id,id_list,format_type,user_id)
        return data_total_response(data_equipment,pages,limits)


    '''
    list
    list all information about Equipment
    '''
    AttendanceInformationClass_post_request_body = Schema(
        title=' 查询学生签到情况 ',  # 标题
        description='这个接口用于检测学生签到情况',  # 接口描述
        type=TYPE_OBJECT,  # 类型 "object" ,"string" ,"number" ,"integer" ,"boolean" ,"array" ,"file"
        format=None,  # 格式    date,date-time,password,binary,bytes,float,double,int32,int64,email,ipv4, ipv6, uri, uuid, slug, decimal
        enum=None,  # [列表]列举参数的请求值
        pattern=None,  # 当 format为 string是才填此项
        # 当 type为object时，为dict对象 {'str1': Schema对象, 'str2': SchemaRef对象}
        properties=post_search,
        required=['input_string'],  # [必须的属性列表]
        items=None,  # 当type是array时，填此项
    )
    AttendanceInformationClass_post_responses_success = Response(
        description='查询考勤成绩成功的响应',
        schema=responses_success,
        examples={
            'message': post_success
        }
    )
    AttendanceInformationClass_post_responses_fail = Response(
        description='',
        schema=responses_fail,
        examples={
            'message': post_error
        }
    )

    @swagger_auto_schema(
        request_body=AttendanceInformationClass_post_request_body,
        manual_parameters=None,
        operation_id=None,
        operation_description='这个接口用于查询学生签到情况',
        operation_summary=None,
        security=None,
        responses={
            201: AttendanceInformationClass_post_responses_success, 400: AttendanceInformationClass_post_responses_fail
        },
        tags=None)
    @get_request_args
    @csrf_exempt
    def post(self, request,args,session):
        is_login = request.COOKIES.get('is_login')
        if not request.session.get(is_login, None):
            return HttpResponse(dumps({'code': 0}),  content_type=content_type_tmp, charset='utf-8')
        user_id = request.COOKIES.get('user_id')
        user_id = request.session.get(user_id)
        input_string = args.get('input_string', None)
        pages = int(args.get('page', 1))
        limits = int(args.get('limits', 20))
        course_plan_id = args.get('course_plan_id')
        id_list=[]
        format_type = 2
        if input_string == None:
            data_equipment = data_attendance(course_plan_id,id_list,format_type,user_id)
        else:
            input_string = input_string.strip()
            try:
                test_input = eval(input_string)
            except NameError:
                test_input = input_string
            if isinstance(test_input,int):
                data_equipment = list(models.TCyequipment.objects.filter(
                    Q(id=test_input) |
                    Q(id_user=test_input) |
                    Q( status = test_input )|
                    Q( idmanager = test_input )|
                    Q( time = test_input )|
                    Q(timeupdate=str(test_input)), id_plan = course_plan_id
                ).values('id'))
            else:
                data_equipment = list(models.TCyequipment.objects.filter(
                    Q(id_user__name__icontains=input_string)
                    | Q(idmanager__name__icontains=input_string),
                    id_plan=course_plan_id).values(
                        'id'))
            data_equipment = data_attendance(course_plan_id, data_equipment,format_type,user_id)
        return data_total_response(data_equipment,pages,limits)

class StudentAttendance(APIView):
    '''
    list
    list all information about Equipment
    '''
    data_schema = {
        'param2':
        Schema(
            title='签到课程',
            description='签到的课程安排表id ',
            type=TYPE_INTEGER,
            format='int32',
            enum=None,
        ),
        'param2__id_curricula__name':
        Schema(
            title='签到课程名称',
            description='签到课程名称',
            type=TYPE_INTEGER,
            format='int32',
            enum=None,
        ),
        'param2__timebegin':
        Schema(
            title='签到课程开始时间',
            description='签到课程开始时间',
            type=TYPE_INTEGER,
            format='int32',
            enum=None,
        ),
        'param2__timeend':
        Schema(
            title='签到课程结束时间',
            description='签到课程结束时间',
            type=TYPE_INTEGER,
            format='int32',
            enum=None,
        ),
        'status':
        Schema(
            title='签到',
            description=' 1 代表 已在课程中签到，2 代表已经在课程中签退3 代表在课程中迟到，4 代表旷课',
            type=TYPE_INTEGER,
            format='int32',
            enum=None,
        ),
        'timeupdate':
        Schema(
            title='记录更新时间',
            description=' 记录最后更新时间；（2000-1-1 0:0:0 经过的秒），必须有值',
            type=TYPE_INTEGER,
            format='int32',
            enum=None,
        ),
        'idmanager__name':
        Schema(
            title='修改字段的操作员姓名',
            description=' 修改字段数据的操作员姓名',
            type=TYPE_INTEGER,
            format='int32',
            enum=None,
        ),
        'time':
        Schema(
            title='上课时间',
            description=' 每一次课程的上课时间，从2001年一月一日的秒数',
            type=TYPE_INTEGER,
            format='int32',
            enum=None,
        ),
    }
    data_schema_present = Schema(
    title ='查询成功的返回',
    description = '查询成功返回的函数值',
    type = TYPE_OBJECT,  # 类型
    properties = data_schema
    )
    get_responses_success = Schema(
        title='成功获取查询数据',
        description='这个接口用于展示成功获取全部数据的格式',
        type=TYPE_OBJECT,
        properties={
                    'page': Schema(
                        title='表示当前的页码数',
                        description=' 表示你现在想要展示的页码数',
                        type=TYPE_INTEGER,
                        format='int32'
                    ),
            'limits': Schema(
                        title='行数',
                        description='表示你想展示在一页上展示的数据行数',
                        type=TYPE_INTEGER,
                        format='int32'
                    ),
            'total_number': Schema(
                        title='页数',
                        description='表示总页数',
                        type=TYPE_INTEGER,
                        format='int32'
                    ),
            'data': Schema(
                        title='数据',
                        description='用于传递查询到的全部数据',
                        type=TYPE_OBJECT,
                        properties = [data_schema_present,data_schema_present]
                    ),
        }
    )
    StudentAttendanceInformation_get_request_body = Schema(
        title='',  # 标题
        description=None,  # 接口描述
        type=TYPE_STRING,  # 类型 "object" ,"string" ,"number" ,"integer" ,"boolean" ,"array" ,"file"
        format=None,  # 格式    date,date-time,password,binary,bytes,float,double,int32,int64,email,ipv4, ipv6, uri, uuid, slug, decimal
        enum=None,  # [列表]列举参数的请求值
        pattern=None,  # 当 format为 string是才填此项
        # 当 type为object时，为dict对象 {'str1': Schema对象, 'str2': SchemaRef对象}
        properties=None,
        required=None,  # [必须的属性列表]
        items=None,  # 当type是array时，填此项
    )
    StudentAttendanceInformation_get_responses_success = Response(
        description='学生获取考勤数据成功的响应',
        schema=get_responses_success,
        examples={
            'message': patch_success
        }
    )
    StudentAttendanceInformation_get_responses_fail = Response(
        description='学生获取考勤数据失败的响应',
        schema=responses_fail,
        examples={
            'message': patch_error
        }
    )

    @swagger_auto_schema(
        request_body=None,
        manual_parameters=None,
        operation_id=None,
        operation_description='学生端查看自己本人的考勤记录',
        operation_summary=None,
        security=None,
        responses={
            200: StudentAttendanceInformation_get_responses_success,
            401: StudentAttendanceInformation_get_responses_fail
        },
        tags=None)
    @get_request_args
    @csrf_exempt
    def get(self, request,args,session):
        is_login = request.COOKIES.get('is_login')
        if not request.session.get(is_login, None):
            return HttpResponse(dumps({'code': 0}),  content_type=content_type_tmp, charset='utf-8')
        user_id = request.COOKIES.get('user_id')
        user_id = request.session.get(user_id)
        pages = int(args.get('page', 1))
        limits = int(args.get('limits', 20))
        user_id = request.COOKIES.get('user_id')
        user_id = request.session.get(user_id)
        course_plan_id = args.get('course_plan_id')
        id_list=[]
        format_type = 3
        data_equipment = data_attendance(course_plan_id, id_list,format_type,user_id)
        return data_total_response(data_equipment,pages,limits)
    '''
    list
    list all information about Equipment
    '''
    post_search['course_plan_id'] =   Schema(
            title='需要查询的课程id',
            description='需要查询的课程id，需要前端传递给后端',
            type=TYPE_INTEGER,
            format='int32',
            enum=None,
        )
    StudentAttendanceInformation_post_request_body = Schema(
        title='学生查询自己的签到情况',  # 标题
        description=None,  # 接口描述
        type=TYPE_OBJECT,  # 类型 "object" ,"string" ,"number" ,"integer" ,"boolean" ,"array" ,"file"
        format=None,  # 格式    date,date-time,password,binary,bytes,float,double,int32,int64,email,ipv4, ipv6, uri, uuid, slug, decimal
        enum=None,  # [列表]列举参数的请求值
        pattern=None,  # 当 format为 string是才填此项
        # 当 type为object时，为dict对象 {'str1': Schema对象, 'str2': SchemaRef对象}
        properties=post_search,
        required=['input_string'],  # [必须的属性列表]
        items=None,  # 当type是array时，填此项
    )
    StudentAttendanceInformation_post_responses_success = Response(
        description='查询考勤成绩成功的响应',
        schema=responses_success,
        examples={
            'message': '修改成功'
        }
    )
    StudentAttendanceInformation_post_responses_fail = Response(
        description='查询考勤成绩失败的响应',
        schema=responses_fail,
        examples={
            'message': patch_error
        }
    )

    @swagger_auto_schema(
        request_body=StudentAttendanceInformation_post_request_body,
        manual_parameters=None,
        operation_id=None,
        operation_description='学生查询自己的考勤成绩的端口',
        operation_summary=None,
        security=None,
        responses={
            201: StudentAttendanceInformation_post_responses_success, 400: StudentAttendanceInformation_post_responses_fail
        },
        tags=None)
    @get_request_args
    @csrf_exempt
    def post(self, request,args,session):
        is_login = request.COOKIES.get('is_login')
        if not request.session.get(is_login, None):
            return HttpResponse(dumps({'code': 0}),  content_type=content_type_tmp, charset='utf-8')
        user_id = request.COOKIES.get('user_id')
        user_id = request.session.get(user_id)
        input_string = args.get('input_string', None)
        pages = int(args.get('page', 1))
        limits = int(args.get('limits', 20))
        user_id = request.COOKIES.get('user_id')
        user_id = request.session.get(user_id)
        course_plan_id = args.get('course_plan_id')
        id_list = []
        format_type = 3
        if input_string == None:
            data_equipment = data_students_attendance(user_id,id_list)
        else:
            input_string = input_string.strip()
            try:
                test_input = eval(input_string)
            except NameError:
                test_input = input_string
            if isinstance(test_input,int):
                data_equipment = list(models.TCyequipment.objects.filter(
                    Q(id=test_input) |
                    Q( status = test_input )|
                    Q( idmanager = test_input )|
                    Q( time = test_input )|
                    Q(timeupdate=str(test_input)), id_user = user_id
                ).values('id'))
            else:
                data_equipment = list(models.TCyequipment.objects.filter(
                    Q(id_user__name__icontains=input_string)
                    | Q(idmanager__name__icontains=input_string),
                    id_user=user_id).values(
                        'id'))
            data_equipment = data_attendance(course_plan_id,data_equipment,format_type,user_id)
        return data_total_response(data_equipment,pages,limits)


class LocationInformation(APIViewDelete):
    '''
    list
    list all information about Equipment
    '''
    data_schema = {
    }
    LocationInformation_get_responses_success = Response(
        description='EquipmentInformation_get_responses is success',
        schema=get_responses_success,
        examples=None,
    )
    LocationInformation_get_responses_fail = Response(
        description='LocationInformation_get_responses is failure',
        schema=responses_fail,
        examples={
            'message': patch_error
        }
    )

    @swagger_auto_schema(
        request_body=None,
        manual_parameters=None,
        operation_id=None,
        operation_description='The api for all equipment specific information',
        operation_summary='equipment information',
        security=None,
        responses={
            200: LocationInformation_get_responses_success,
            401: LocationInformation_get_responses_fail
        },
        tags=None)
    @get_request_args
    @csrf_exempt
    def get(self, request,args,session):
        is_login = request.COOKIES.get('is_login')
        if not request.session.get(is_login, None):
            return HttpResponse(dumps({'code': 0}),  content_type=content_type_tmp, charset='utf-8')
        pages = int(args.get('page', 1))
        limits = int(args.get('limits', 20))
        data_equipment = models.TCyequipment.objects.all().values(
            'id', 'name', 'id_location__name', 'id_location_sn', 'id_ip', 'mac', 'state', 'login', 'link', 'class_field', 'dx', 'dy', 'id_user__name', 'id_plan', 'itimebegin', 'itimelogin', 'whitelist', 'rem', 'timeupdate', 'idmanager__name', 'portlisten', 'type', 'timedelay', 'keycance', 'keyOk', 'keydel', 'keyf1', 'onall', 'rangeequs', 'listplace')
        return data_total_response(data_equipment,pages,limits)
        # return data_equipment_response(data_equipment, pages, limits)

    '''
    list
    list all information about Equipment
    '''
    LocationInformation_post_request_body = Schema(
        title=' input ',  # 标题
        description=' input string for string ',  # 接口描述
        type=TYPE_OBJECT,  # 类型 "object" ,"string" ,"number" ,"integer" ,"boolean" ,"array" ,"file"
        format=None,  # 格式    date,date-time,password,binary,bytes,float,double,int32,int64,email,ipv4, ipv6, uri, uuid, slug, decimal
        enum=None,  # [列表]列举参数的请求值
        pattern=None,  # 当 format为 string是才填此项
        # 当 type为object时，为dict对象 {'str1': Schema对象, 'str2': SchemaRef对象}
        properties=post_search,
        required=['input_string'],  # [必须的属性列表]
        items=None,  # 当type是array时，填此项
    )
    LocationInformation_post_responses_success = Response(
        description='LocationInformation_post_responses is success',
        schema=get_responses_success,
    )
    LocationInformation_post_responses_fail = Response(
        description='LocationInformation_post_responses is failure',
        schema=responses_fail,
        examples={
            'message': post_error
        }
    )

    @swagger_auto_schema(
        request_body=LocationInformation_post_request_body,
        manual_parameters=None,
        operation_id=None,
        operation_description='The post to get specific information about specific equipment',
        operation_summary=None,
        security=None,
        responses={
            201: LocationInformation_post_responses_success,
            400: LocationInformation_post_responses_fail
        },
        tags=None)
    @get_request_args
    @csrf_exempt
    def post(self, request,args,session):
        is_login = request.COOKIES.get('is_login')
        if not request.session.get(is_login, None):
            return HttpResponse(dumps({'code': 0}),  content_type=content_type_tmp, charset='utf-8')
        input_string = args.get('input_string', None)
        pages = int(args.get('page', 1))
        limits = int(args.get('limits', 20))
        if input_string == None:
            data_equipment = models.TCyequipment.objects.all().values(
                'id', 'name', 'id_location__name', 'id_location_sn', 'id_ip', 'mac', 'state', 'login', 'link', 'class_field', 'dx', 'dy', 'id_user__name', 'id_plan', 'itimebegin', 'itimelogin', 'whitelist', 'rem', 'timeupdate', 'idmanager__name', 'portlisten', 'type', 'timedelay', 'keycance', 'keyOk', 'keydel', 'keyf1', 'onall', 'rangeequs', 'listplace')
        else:
            input_string = input_string.strip()
            try:
                test_input = eval(input_string)
            except NameError:
                test_input = input_string
            if isinstance(test_input,int):
                data_equipment = models.TCyequipment.objects.filter(
                    Q(id=test_input) |
                    Q(id_location_sn=test_input) |
                    Q(id_location=test_input) |
                    Q(id_user=test_input) |
                    Q(idmanager=test_input) |
                    Q(id_ip___icontains=str(test_input)) |
                    Q(mac___icontains=str(test_input)) |
                    Q(state=test_input) |
                    Q(login=test_input) |
                    Q(link=test_input) |
                    Q(class_field=test_input) |
                    Q(dx=test_input) |
                    Q(dy=test_input) |
                    Q(id_plan=test_input) |
                    Q(itimebegin=test_input) |
                    Q(itimelogin=test_input) |
                    Q(timeupdate=test_input) |
                    Q(portlisten=test_input) |
                    Q(type=test_input) |
                    Q(timedelay=test_input) |
                    Q(keycancel=test_input) |
                    Q(keyOk=test_input) |
                    Q(keydel=test_input) |
                    Q(keyf1=test_input) |
                    Q(onall=test_input)
                ).values('id', 'name', 'id_location__name', 'id_location_sn', 'id_ip', 'mac', 'state', 'login', 'link', 'class_field', 'dx', 'dy', 'id_user__name', 'id_plan', 'itimebegin', 'itimelogin', 'whitelist', 'rem', 'timeupdate', 'idmanager__name', 'portlisten', 'type', 'timedelay', 'keycance', 'keyOk', 'keydel', 'keyf1', 'onall', 'rangeequs', 'listplace')
            else:
                data_equipment = models.TCyequipment.objects.filter(
                    Q(name___icontains=input_string) |
                    Q(whitelist__icontains=input_string) |
                    Q(id_location__name__icontains=input_string) |
                    Q(id_user__name__icontains=input_string) |
                    Q(idmanager__name__icontains=input_string) |
                    Q(rem__icontains=input_string) |
                    Q(rangeequs__icontains=input_string) |
                    Q(listplaces__icontains=input_string)
                ).values('id', 'name', 'id_location__name', 'id_location_sn', 'id_ip', 'mac', 'state', 'login', 'link', 'class_field', 'dx', 'dy', 'id_user__name', 'id_plan', 'itimebegin', 'itimelogin', 'whitelist', 'rem', 'timeupdate', 'idmanager__name', 'portlisten', 'type', 'timedelay', 'keycance', 'keyOk', 'keydel', 'keyf1', 'onall', 'rangeequs', 'listplace')
        return data_total_response(data_equipment,pages,limits)

    '''
    list
    list all information about Equipment
    '''
    LocationInformation_put_data_schema = {
    }
    LocationInformation_put_request_body = Schema(
        title=' request body for adding equipment record ',  # 标题
        description=' to add equipment record, information needed',  # 接口描述
        type=TYPE_OBJECT,  # 类型 "object" ,"string" ,"number" ,"integer" ,"boolean" ,"array" ,"file"
        format=None,  # 格式    date,date-time,password,binary,bytes,float,double,int32,int64,email,ipv4, ipv6, uri, uuid, slug, decimal
        enum=None,  # [列表]列举参数的请求值
        pattern=None,  # 当 format为 string是才填此项
        # 当 type为object时，为dict对象 {'str1': Schema对象, 'str2': SchemaRef对象}
        properties=LocationInformation_put_data_schema,
        required=['id', 'name', 'id_location', 'id_location_sn',
                  'id_ip', 'mac', 'state', 'login', 'link', 'class_field', 'dx', 'dy', 'id_user', 'id_plan', 'itimebegin', 'whitelist', 'rem', 'timeupdate', 'idmanager', 'portlisten', 'type_field', 'timedelay', 'keycance', 'keyOk', 'keydel', 'keyf1', 'onall', 'rangeequs', 'listplace'],  # [必须的属性列表]
        items=None,  # 当type是array时，填此项
    )
    LocationInformation_put_responses_success = Response(
        description='LocationInformation_put_responses is success',
        schema=responses_success,
        examples={
            'message': '添加成功'
        }
    )
    LocationInformation_put_responses_fail = Response(
        description='LocationInformation_put_responses is failure',
        schema=responses_fail,
        examples={
            'message': put_error
        }
    )

    @swagger_auto_schema(
        request_body=LocationInformation_put_request_body,
        manual_parameters=None,
        operation_id=None,
        operation_description='The api for add equipment information action',
        operation_summary=None,
        security=None,
        responses={
            201: LocationInformation_put_responses_success,
            400: LocationInformation_put_responses_fail
        },
        tags=None)
    @get_request_args
    @csrf_exempt
    def put(self, request,args,session):
        '''
        This method is to use to add equipment information
        '''
        field_name = ['id', 'name', 'id_location', 'id_location_sn',
                      'id_ip', 'mac', 'state', 'login', 'link', 'class_field', 'dx', 'dy', 'id_user', 'id_plan', 'itimebegin', 'whitelist', 'rem', 'timeupdate', 'idmanager', 'portlisten', 'type_field', 'timedelay', 'keycance', 'keyOk', 'keydel', 'keyf1', 'onall', 'rangeequs', 'listplace']
        is_login = request.COOKIES.get('is_login')
        if not request.session.get(is_login, None):
            return HttpResponse(dumps({'code': 0}),  content_type=content_type_tmp, charset='utf-8')
        variable_name = locals()
        for i in field_name:
            if args[i]==0:
                variable_name[i]=data_equipment[i]
            else:
                variable_name[i] = args.get(i, data_equipment[i])
        user_id = request.COOKIES.get('user_id')
        user_id = request.session.get(user_id)
        variable_name['idmanager'] = user_id
        # 批量命名变量
        try:
            ueses_tmp = models.TCyequipment.objects.create(
                id=variable_name.get('id'),
                name=variable_name.get('name'),
                id_location=variable_name.get('id_location'),
                id_location_sn=variable_name.get('id_location_sn'),
                id_ip=variable_name.get('id_ip'),
                mac=variable_name.get('mac'),
                state=variable_name.get('state'),
                login=variable_name.get('login'),
                link=variable_name.get('link'),
                class_field=variable_name.get('class_field'),
                dx=variable_name.get('dx'),
                dy=variable_name.get('dy'),
                id_user=variable_name.get('id_user'),
                id_plan=variable_name.get('id_plan'),
                itimebegin=variable_name.get('itimebegin'),
                whitelist=variable_name.get('whitelist'),
                rem=variable_name.get('rem'),
                timeupdate=variable_name.get('timeupdate'),
                idmanager=variable_name.get('idmanager'),
                portlisten=variable_name.get('portlisten'),
                type_field=variable_name.get('type_field'),
                timedelay=variable_name.get('timedelay'),
                keycance=variable_name.get('keycance'),
                keyOk=variable_name.get('keyOk'),
                keydel=variable_name.get('keydel'),
                keyf1=variable_name.get('keyf1'),
                onall=variable_name.get('onall'),
                rangeequs=variable_name.get('rangeequs'),
                listplace=variable_name.get('listplace')
            )
            return HttpResponse(dumps({'message': put_success}),  content_type=content_type_tmp, charset='utf-8')
        except Exception as error:
            return HttpResponse(dumps({'message': data_base_error_specific+str(error)}),  content_type=content_type_tmp, charset='utf-8')
    '''
    list
    list all information about Equipment
    '''
    LocationInformation_patch_request_body = Schema(
        title=' the equipment information ',  # 标题
        description=' the equipment information needed to be updated ',  # 接口描述
        type=TYPE_OBJECT,  # 类型 "object" ,"string" ,"number" ,"integer" ,"boolean" ,"array" ,"file"
        format=None,  # 格式    date,date-time,password,binary,bytes,float,double,int32,int64,email,ipv4, ipv6, uri, uuid, slug, decimal
        enum=None,  # [列表]列举参数的请求值
        pattern=None,  # 当 format为 string是才填此项
        # 当 type为object时，为dict对象 {'str1': Schema对象, 'str2': SchemaRef对象}
        properties=LocationInformation_put_data_schema,
        required=['id'],  # [必须的属性列表]
        items=None,  # 当type是array时，填此项
    )
    LocationInformation_patch_responses_success = Response(
        description='LocationInformation_patch_responses is success',
        schema=responses_success,
        examples={
            'message': '修改成功'
        }
    )
    LocationInformation_patch_responses_fail = Response(
        description='LocationInformation_patch_responses is failure',
        schema=responses_fail,
        examples={
            'message': patch_error
        }
    )

    @swagger_auto_schema(
        request_body=LocationInformation_patch_request_body,
        manual_parameters=None,
        operation_id=None,
        operation_description='The api for change the information about an equipment ',
        operation_summary=None,
        security=None,
        responses={
            201: LocationInformation_patch_responses_success,
            400: LocationInformation_patch_responses_fail
        },
        tags=None)
    @get_request_args
    @csrf_exempt
    def patch(self, request,args,session):
        is_login = request.COOKIES.get('is_login')
        if not request.session.get(is_login, None):
            return HttpResponse(dumps({'code': 0}),  content_type=content_type_tmp, charset='utf-8')
        id_equipment = args.get('id')
        data_equipment_initial = list(
            models.TCyequipment.objects.filter(id=id_equipment).values())
        if data_equipment_initial == []:
            return HttpResponse(dumps({'message': id_error}),  content_type=content_type_tmp, charset='utf-8')
        data_equipment = data_equipment_initial[0]
        field_name = ['id', 'name', 'id_location', 'id_location_sn',
                      'id_ip', 'mac', 'state', 'login', 'link', 'class_field', 'dx', 'dy', 'id_user', 'id_plan', 'itimebegin', 'whitelist', 'rem', 'timeupdate', 'idmanager', 'portlisten', 'type_field', 'timedelay', 'keycance', 'keyOk', 'keydel', 'keyf1', 'onall', 'rangeequs', 'listplace']
        variable_name = locals()
        for i in field_name:
            variable_name[i] = args.get(i, data_equipment[i])
        user_id = request.COOKIES.get('user_id')
        user_id = request.session.get(user_id)
        variable_name['idmanager'] = user_id
        try:
            models.TCyequipment.objects.filter(id=id_equipment).update(
                name=variable_name.get('name'),
                id_location=variable_name.get('id_location'),
                id_location_sn=variable_name.get('id_location_sn'),
                id_ip=variable_name.get('id_ip'),
                mac=variable_name.get('mac'),
                state=variable_name.get('state'),
                login=variable_name.get('login'),
                link=variable_name.get('link'),
                class_field=variable_name.get('class_field'),
                dx=variable_name.get('dx'),
                dy=variable_name.get('dy'),
                id_user=variable_name.get('id_user'),
                id_plan=variable_name.get('id_plan'),
                itimebegin=variable_name.get('itimebegin'),
                whitelist=variable_name.get('whitelist'),
                rem=variable_name.get('rem'),
                timeupdate=variable_name.get('timeupdate'),
                idmanager=variable_name.get('idmanager'),
                portlisten=variable_name.get('portlisten'),
                type_field=variable_name.get('type_field'),
                timedelay=variable_name.get('timedelay'),
                keycance=variable_name.get('keycance'),
                keyOk=variable_name.get('keyOk'),
                keydel=variable_name.get('keydel'),
                keyf1=variable_name.get('keyf1'),
                onall=variable_name.get('onall'),
                rangeequs=variable_name.get('rangeequs'),
                listplace=variable_name.get('listplace')
            )
        except Exception as error:
            return HttpResponse(dumps({'message': data_base_error_specific+str(error)}),  content_type=content_type_tmp, charset='utf-8')



def index(request):
    return HttpResponse('你好！这里是投票系统')


class Equipment(APIView):
    def get(self, request):
        with connection.cursor() as cursor:
            cursor.execute(
                "select ID,Name,State from T_CyEquipment")
            data = cursor.fetchall()
        data_name = ("ipc_id", "ipc_name", "active_status")
        data_result = []
        if data == []:
            return HttpResponse({
                "data": 0,
                "code": 5013,
                "msg": "Fail",
            })
        else:
            for i in data:
                tmp = dict(zip(data_name, i))
                data_result.append(tmp)
            total_count = len(data)
            t = {
                "data": {
                    "total_count": total_count,
                    "ipc_list": data_result,
                },
                "code": 0,
                "msg": "succeed",
            }
            return HttpResponse(t)  # ('%s'%t)

    def post(self, request):
        status = request.session.get('is_login')
        if not status:
            return redirect('/login/')
        with connection.cursor() as cursor:
            cursor.execute(
                "select ID,Name,State from T_CyEquipment")
            data = cursor.fetchall()
        data_name = ("ipc_id", "ipc_name", "active_status")
        data_result = []
        if data == []:
            return HttpResponse({
                "data": 0,
                "code": 5013,
                "msg": "Fail",
            })
        else:
            for i in data:
                tmp = dict(zip(data_name, i))
                data_result.append(tmp)
            total_count = len(data)
            return HttpResponse({
                "data": {
                    "total_count": total_count,
                    "ipc_list": data_result,
                },
                "code": 0,
                "msg": "succeed",
            })


class User(APIView):
    def get(self, request):
        data = models.TCyuser.objects.all().values('name')
        data_result = []
        for i in range(len(data)):
            data_result.append({"username": data[i]['name']})
        tmp = {
            "data": {
                "ipc_namelist": data_result
            },
        }
        return HttpResponse('%s' % tmp)

    def post(self, request):
        data = models.TCyuser.objects.all().values('name')
        data_result = []
        for i in range(len(data)):
            data_result.append({"username": data[i]['name']})
        tmp = {
            "data": {
                "ipc_namelist": data_result
            },
        }
        return HttpResponse(tmp)


class Academy(APIView):
    def get(self, request):
        user_id = '1910404051'
        data = models.TCyuser.objects.get(id=user_id)
        data_department = models.TCydept.objects.get(id=data.deptid)
        data_department = models.TCydept.objects.get(id=data_department.parent)
        tmp = {
            "department_list": [
                {
                    "academy": data_department.name
                }
            ],
            "code": 0,
            "msg": "succeed",
        }
        return HttpResponse(tmp)

    def post(self, request):
        user_id = request.POST.get('user_id')
        data = models.TCyuser.objects.get(id=user_id)
        data_department = models.TCydept.objects.get(id=data.deptid)
        data_department = models.TCydept.objects.get(id=data_department.parent)
        tmp = {
            "department_list": [
                {
                    "academy": data_department.name
                }
            ],
            "code": 0,
            "msg": "succeed",
        }
        return HttpResponse(tmp)


class Department(APIView):
    def get(self, request):
        user_id = '1910404051'
        data = models.TCyuser.objects.get(id=user_id)
        data_department = models.TCydept.objects.get(id=data.deptid)
        data_department = models.TCydept.objects.get(id=data_department.parent)
        tmp = {
            "department_list": [
                {
                    "academy": data_department.name
                }
            ],
            "code": 0,
            "msg": "succeed",
        }
        return HttpResponse(tmp)

    def post(self, request):
        user_id = request.POST.get('user_id')
        data = models.TCyuser.objects.get(id=user_id)
        data_department = models.TCydept.objects.get(id=data.deptid)
        data_department = models.TCydept.objects.get(id=data_department.parent)
        tmp = {
            "department_list": [
                {
                    "academy": data_department.name
                }
            ],
            "code": 0,
            "msg": "succeed",
        }
        return HttpResponse(tmp)
