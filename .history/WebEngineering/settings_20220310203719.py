"""
# @Author           : Albert Wang
# @Copyright Notice : Copyright (c) 2022 Albert Wang 王子睿, All Rights Reserved.
# @Time             : 2022-01-13 01:42:51
# @Description      :
# @Email            : shadowofgost@outlook.com
# @FilePath         : /WebEngineering/WebEngineering/settings.py
# @LastAuthor       : Albert Wang
# @LastTime         : 2022-03-10 20:28:20
# @Software         : Vscode
"""
"""
Django settings for WebEngineering project.

Generated by 'django-admin startproject' using Django 3.0.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

from datetime import timedelta
from celery.schedules import crontab
import os
import sys

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.insert(0, os.path.join(BASE_DIR, "Apps"))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "wvqtx(q%q%@y5al+hj)xz&)fwb=f#(akdp+fjv*gzo_9tmm-*%"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = [
    "192.168.3.25",
    "10.20.7.53",
    "localhost",
    "127.0.0.1",
    "61.155.169.144",
    "47.117.68.250",
]


# Application definition

INSTALLED_APPS = [
    "corsheaders",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django_extensions",
    "werkzeug_debugger_runserver",
    "rest_framework",
    "drf_yasg",
    "polls",
    "django_celery_results",
    "django_celery_beat",
]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    # 'django.middleware.csrf.CsrfViewMiddleware',python manage.py runserver_plus
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "django.middleware.cache.UpdateCacheMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.cache.FetchFromCacheMiddleware",
]

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, "templates")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]
DATABASES = {
    "default": {
        "ENGINE": "sql_server.pyodbc",
        "NAME": "WebEngineering",
        "HOST": "61.155.169.144",
        "PORT": "1433",
        "USER": "wangliang",
        "PASSWORD": "suda123456",
        "OPTIONS": {
            "driver": "SQL Server Native Client 11.0",
            "MARS_Connection": True,
        },
    }
}

# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases
"""
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'WebEngineering',
        'HOST': 'rm-uf652406w65wzy97j5o.mysql.rds.aliyuncs.com',
        'PORT': '3306',
        'USER': 'shadowofgost',
        'PASSWORD': '@WzR@CsY@1260',
    }
}
"""

# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/##auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = "zh-hans"

TIME_ZONE = "Asia/Shanghai"

USE_I18N = True

USE_L10N = True

USE_TZ = False


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = "/static/"

STATIC_ROOT = os.path.join(BASE_DIR, "static")

STATICFILES_DIRS = [
    "/var/www/static/",
    ("css", os.path.join(STATIC_ROOT, "css")),
    ("img", os.path.join(STATIC_ROOT, "img")),
    ("js", os.path.join(STATIC_ROOT, "js")),
]
# 验证码
CAPTCHA_IMAGE_SIZE = (80, 30)
CAPTCHA_LENGTH = 4
CAPTCHA_TIMEOUT = 1

# Settings for front information

CORS_ORIGIN_WHITELIST = (
    "http://localhost:9000",
    "http://localhost:8308",
    "http://localhost:8080",
    "Https://127.0.0.1:9000",
)
# 添加CORS配置
# 设置白名单
# 设置CORS的COOKIES
CORS_ALLOW_CREDENTIALS = True
CORS_ORIGIN_ALLOW_ALL = True
CORS_ALLOW_HEADERS = " * "
CORS_ALLOW_METHODS = (
    "DELETE",
    "GET",
    "HEAD",
    "OPTIONS",
    "PATCH",
    "POST",
    "PUT",
    "VIEW",
    "TRACE",
)
CORS_ALLOW_HEADERS = (
    "accept",
    "accept-encoding",
    "authorization",
    "content-type",
    "dnt",
    "origin",
    "user-agent",
    "x-csrftoken",
    "x-CSRFToken",
    "X-CSRFToken",
    "csrftoken",
    "x-requested-with",
    "Pragma",
    "XMLHttpRequest",
    "X_FILENAME",
)

# SWAGGER Settings

SWAGGER_SETTINGS = {
    "LOGIN_URL": "/admin/login",
    "LOGOUT_URL": "/admin/logout",
    "PERSIST_AUTH": True,
    "REFETCH_SCHEMA_WITH_AUTH": True,
    "REFETCH_SCHEMA_ON_LOGOUT": True,
    "DEFAULT_INFO": "DjangoDrfTest.urls.swagger_info",  # 这里注意，更改DjangoDrfTest
    "SECURITY_DEFINITIONS": {
        "Basic": {"type": "basic"},
        "Bearer": {"type": "apiKey", "name": "authorization", "in": "header"},
        "Query": {"type": "apiKey", "name": "auth", "in": "query"},
    },
}


# Session Settings
# Session的COOKIES保存在浏览器上时的key，即：sessionid＝随机字符串（默认）

SESSION_ENGINE = "django.contrib.sessions.backends.cache"  # 引擎
# 使用的缓存别名（默认内存缓存，也可以是memcache），此处别名依赖缓存的设置
SESSION_CACHE_ALIAS = "default"
SESSION_COOKIES_NAME = "sessionid"
SESSION_COOKIES_PATH = "/"  # Session的COOKIES保存的路径（默认）
SESSION_COOKIES_DOMAIN = True  # Session的COOKIES保存的域名（默认）
SESSION_COOKIES_SECURE = True  # 是否Https传输COOKIES（默认）
SESSION_COOKIES_HTTPONLY = False  # 是否Session的COOKIES只支持http传输（默认）
SESSION_COOKIES_AGE = 1800  # Session的COOKIES失效日期（2周）（数字为秒数）（默认）
SESSION_EXPIRE_AT_BROWSER_CLOSE = True  # 是否关闭浏览器使得Session过期（默认）
SESSION_SAVE_EVERY_REQUEST = True  # 是否每次请求都保存Session，默认修改之后才保存（默认）
DCS_SESSION_COOKIES_SAMESITE = "None"
CSRF_COOKIES_SAMESITE = None
# Cache settings

CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/1",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        },
    }
}
ROOT_URLCONF = "WebEngineering.urls"
WSGI_APPLICATION = "WebEngineering.wsgi.application"
RUNSERVERPLUS_SERVER_ADDRESS_PORT = "localhost:9000"
ROOT_URLCONF = "WebEngineering.urls"
############################################
# 发送邮件功能
EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_USE_TLS = True  # 是否使用TLS安全传输协议(用于在两个通信应用程序之间提供保密性和数据完整性。)
EMAIL_USE_SSL = False  # 是否使用SSL加密，qq企业邮箱要求使用
EMAIL_HOST = "smtp.office365.com"
# EMAIL_HOST = "smtp-mail.outlook.com"
EMAIL_PORT = 587  # 发件箱的SMTP服务器端口
EMAIL_HOST_USER = "shadowofgost@outlook.com"  # 发送邮件的邮箱地址
EMAIL_HOST_PASSWORD = "@WzR@CsY@1260"  # smtp.office365.com邮箱可以直接使用密码
EMAIL_FROM = "shadowofgost@outlook.com"  # 必须与EMAIL_HOST_USER相同
# 使用smtp.office365.com邮件服务器时，必须设置DEFAULT_FROM_EMAIL = EMAIL_HOST_USER
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER
##########################################
# Celery settings
# Broker的地址
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
CELERY_BROKER_URL = "redis://127.0.0.1:6379/2"

# 任务执行返回结果
CELERY_RESULT_BACKEND = "django-db"

# celery内容等消息的格式设置
CELERY_ACCEPT_CONTENT = [
    "application/json",
]
CELERY_TASK_SERIALIZER = "json"
CELERY_RESULT_SERIALIZER = "json"
CELERY_IMPORTS = "polls.Tasks.urls"
# celery时区设置，使用settings中TIME_ZONE同样的时区
CELERY_TIMEZONE = TIME_ZONE
# 避免时区的问题
CELERY_ENABLE_UTC = False
DJANGO_CELERY_BEAT_TZ_AWARE = False
# 定时任务
CELERY_BEAT_SCHEDULER = "django_celery_beat.schedulers:DatabaseScheduler"
# 定时任务
CELERY_BEAT_SCHEDULE = {
    # 每十秒执行一次add方法
    "test": {
        "task": "add",
        # 多长时间执行一次
        # 每个周一的20:57分执行一次mul方法
        "schedule": crontab(),  # 支持直接用数字表示秒数
        # 'schedule': timedelta(seconds=10), # 可以用timedelta对象
        # 必要的参数，这里指add()的参数
        "args": (16, 26),
    }
    # 每个周一的20:57分执行一次mul方法
}
